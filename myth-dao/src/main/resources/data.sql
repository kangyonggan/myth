TRUNCATE TABLE article;
INSERT INTO article VALUES
  (1, 'Ubuntu14.0.4安装及配置系列 - jdk1.8的安装配', '安装配置',
   '### 1. 下载[jdk1.8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)到本地\r\n\r\n### 2. 上传本地jdk到Ubuntu服务器\r\n`$ scp jdk-8u111-linux-x64.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压jdk到指定目录\r\n`# tar -zxvf jdk-8u111-linux-x64.tar.gz -C /root/install/`\r\n\r\n### 4. 配置jdk的环境变量\r\n在`/etc/profile`文件尾追加下面的配置:\r\n\r\n```\r\n# jdk environment  \r\nexport JAVA_HOME=/root/install/jdk1.8.0_111  \r\nexport JRE_HOME=/root/install/jdk1.8.0_111/jre  \r\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH  \r\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\r\n```\r\n\r\n之后，重新加载配置，让配置生效:\r\n\r\n`# source profile`\r\n\r\n### 5. 测试环境变量是否生效\r\n\r\n`# java -version`\r\n\r\n',
   'kangyonggan', '康永敢', 0, '2016-12-17 10:10:45', '2016-12-18 17:44:15'),
  (2, 'Ubuntu14.0.4安装及配置系列 - maven3.3.9', '安装配置', '### 1. 下载[maven3.3.9](http://maven.apache.org/download.cgi)到本地\r\n\r\n### 2. 上传本地maven到Ubuntu服务器\r\n`$ scp apache-maven-3.3.9-bin.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压maven到指定目录\r\n`# tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /root/install/`\r\n\r\n### 4. 配置maven的环境变量\r\n在`/etc/profile`文件尾追加下面的配置:\r\n\r\n```\r\n# maven environment\r\nexport M2_HOME=/root/install/apache-maven-3.3.9\r\nexport PATH=$PATH:$M2_HOME/bin\r\n```\r\n\r\n之后，重新加载配置，让配置生效:\r\n\r\n`# source profile`\r\n\r\n### 5. 测试环境变量是否生效\r\n`# mvn -version`\r\n\r\n### 6. 配置本地仓库路径\r\n在`/root/install/apache-maven-3.3.9/conf/settings.xml`文件中配置:\r\n\r\n`<localRepository>/root/data/repository</localRepository>`\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:11:33', '2016-12-18 17:43:58'),
  (3, 'Ubuntu14.0.4安装及配置系列 - git1.9.1的安装配置', '安装配置', '### 0. 更新apt-get\r\n`# apt-get update`\r\n\r\n### 1. 下载git\r\n`# apt-get install git`\r\n\r\n### 2. 测试git是否生效\r\n`# git --version`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:14:56', '2016-12-17 22:16:21'),
  (4, 'Ubuntu14.0.4安装及配置系列 - mysql5.6的安装配置', '安装配置', '### 1. 安装\r\n`apt-get install mysql-server-5.6`\r\n\r\n### 2. 启动\r\n`# /etc/init.d/mysql start`\r\n\r\n### 3. 停止\r\n`# /etc/init.d/mysql stop`\r\n\r\n### 4. 重启\r\n`# /etc/init.d/mysql restart`\r\n\r\n### 5. 调整内存\r\n修改`/etc/mysql/my.cnf`,在`[mysqld]`后面追加\r\n\r\n```\r\nperformance_schema_max_table_instances=200\r\ntable_definition_cache=200\r\ntable_open_cache=128\r\n```\r\n\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:15:28', '2016-12-18 17:43:40'),
  (5, 'Ubuntu14.0.4安装及配置系列 - redis3.2.0的安装配置', '安装配置', '### 1. 下载[redis3.2](https://redis.io/)到本地\r\n\r\n### 2. 上传本地redis到Ubuntu服务器\r\n`$ scp redis-3.2.0.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压redis到指定目录\r\n`# tar -zxvf redis-3.2.0.tar.gz -C /root/install/`\r\n\r\n### 4. 安装\r\n`make install`\r\n\r\n### 5. 配置\r\n在`/root/install/redis-3.2.0/redis.conf`后面追加下面的配置:\r\n\r\n`requirepass 123456`\r\n\r\n### 6. 启动\r\n`# redis-server redis.conf &`\r\n\r\n### 6. 测试\r\n\r\n```\r\n# redis-cli -a 123456\r\n> ping\r\n```\r\n\r\n输出:`PONG`\r\n\r\n### 7. 停止\r\n`# redis-cli -a 123456 shutdown`\r\n\r\n### 8. 清空所有缓存\r\n`# redis-cli -a 123456 KEYS \"*\" | xargs redis-cli -a 123456 DEL`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:15:53', '2016-12-18 17:42:34'),
  (6, 'Ubuntu14.0.4安装及配置系列 - tomcat8.5.6的安装配置', '安装配置', '### 1. 下载[tomcat8.5.6](http://tomcat.apache.org/download-80.cgi)到本地\r\n\r\n### 2. 上传本地tomcat到Ubuntu服务器\r\n`$ scp apache-tomcat-8.5.6.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压tomcat到指定目录\r\n`# tar -zxvf apache-tomcat-8.5.6.tar.gz -C /root/install/`\r\n\r\n### 4. 启动\r\n`# sh startup.sh`\r\n\r\n### 5. 停止\r\n`# sh shutdown.sh`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:16:15', '2016-12-17 22:13:59'),
  (7, 'Ubuntu14.0.4安装及配置系列 - zookeeper3.4.9的安装配置', '安装配置', '### 1. 下载[zookeeper3.4.9](http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.9/)到本地\r\n\r\n### 2. 上传本地zookeeper到Ubuntu服务器\r\n`$ scp zookeeper-3.4.9.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压zookeeper到指定目录\r\n\r\n```\r\nmkdir /root/install/server1\r\n# tar zxvf zookeeper-3.4.9.tar.gz -C /root/install/server1/\r\n```\r\n\r\n### 4. 配置（集群）\r\n在`server1`目录下创建两个目录，分别是`data`和`logs`\r\n\r\n```\r\ncd /root/install/server1/\r\nmkdir data\r\nmkdir logs\r\n```\r\n\r\n此时，server1目录下有三个文件\r\n\r\n```\r\nroot@iZ23ldh8kudZ:~/install/server1# pwd\r\n/root/install/server1\r\nroot@iZ23ldh8kudZ:~/install/server1# ll\r\ntotal 20\r\ndrwxr-xr-x  5 root root 4096 Dec 17 15:43 ./\r\ndrwxr-xr-x  8 root root 4096 Dec 17 15:39 ../\r\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 data/\r\ndrwxr-xr-x  2 root root 4096 Dec 17 15:43 logs/\r\ndrwxr-xr-x 10 1001 1001 4096 Aug 23 15:42 zookeeper-3.4.9/\r\n```\r\n\r\n在`data`目录下创建文件`myid`,其内容为`1`\r\n\r\n```\r\nvi /data/myid\r\n# 内容为1\r\n```\r\n\r\n复制配置文件`zookeeper-3.4.9/conf/zoo_sample.cfg`到`zookeeper-3.4.9/conf/zoo.cfg`, 并修改其内容:\r\n\r\n```xml\r\ntickTime=2000\r\ninitLimit=10\r\nsyncLimit=5\r\ndataDir=/root/install/server1/data\r\ndataLogsDir=/root/install/server1/logs\r\nclientPort=2181\r\n\r\nserver.1=121.40.66.176:2888:3888\r\nserver.2=139.196.28.125:2888:3888\r\n```\r\n\r\n> 每台服务器都要有类似的配置\r\n\r\n### 5. 环境变量\r\n\r\n在`/etc/profile`文件最后追加:\r\n\r\n```\r\n# zookeeper environment\r\nexport PATH=$PATH:/root/install/server1/zookeeper-3.4.9/bin\r\n```\r\n\r\n立即生效\r\n\r\n`# source /etc/profile`\r\n\r\n### 6. 启动\r\n\r\n`# zkServer.sh start`\r\n\r\n### 7. 查看是否启动\r\n\r\n```\r\nroot@iZ23ldh8kudZ:~/install/server1/zookeeper-3.4.9# jps\r\n7096 QuorumPeerMain\r\n7114 Jps\r\n```\r\n\r\n看到`QuorumPeerMain`就说明启动成功了\r\n\r\n### 8. 停止\r\n\r\n`# zkServer.sh stop`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:16:39', '2016-12-18 17:43:12'),
  (8, 'Ubuntu14.0.4安装及配置系列 - nexus3.1.0的安装配置', '安装配置', '### 1. 下载[nexus3.1.0](https://www.sonatype.com/download-oss-sonatype)到本地\r\n\r\n### 2. 上传本地nexus到Ubuntu服务器\r\n`$ scp nexus-3.1.0-04-unix.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压nexus到指定目录\r\n`# tar -zxvf nexus-3.1.0-04-unix.tar.gz -C /root/install/`\r\n\r\n### 4. 启动\r\n`# ./nexus start`\r\n\r\n### 5. 停止\r\n`# ./nexus stop`\r\n\r\n### 6. 访问\r\nhttp://kangyonggan.com:8081/\r\n\r\n- 用户名:admin\r\n- 密码:admin123\r\n\r\n登录后的界面:\r\n\r\n![nexus](http://cdn.kangyonggan.com/upload/20161218/20161218022105221.png)\r\n\r\n### 7. 使用\r\n\r\n配置`settings.xml`\r\n\r\n```xml\r\n<servers>\r\n    <server>\r\n      <id>releases</id>\r\n      <username>admin</username>\r\n      <password>admin123</password>\r\n    </server>\r\n    <server>\r\n      <id>snapshots</id>\r\n      <username>admin</username>\r\n      <password>admin123</password>\r\n    </server>\r\n  </servers>\r\n```\r\n\r\n配置`pom.xml`\r\n\r\n```xml\r\n<distributionManagement>\r\n    <repository>\r\n        <id>releases</id>\r\n        <name>nexus releases</name>\r\n        <url>http://kangyonggan.com:8081/repository/maven-releases/</url>\r\n    </repository>\r\n\r\n    <snapshotRepository>\r\n        <id>snapshots</id>\r\n        <name>nexus snapshots</name>\r\n        <url>http://kangyonggan.com:8081/repository/maven-snapshots/</url>\r\n    </snapshotRepository>\r\n</distributionManagement>\r\n```\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:21:05', '2017-01-02 15:08:03'),
  (9, 'Ubuntu14.0.4安装及配置系列 - dubbo-monitor2.5.3的安装配置', '安装配置', '### 1. 下载[dubbo-monitor2.5.3](http://download.csdn.net/detail/liweifengwf/7864009)到本地\r\n\r\n### 2. 上传本地dubbo-monitor到Ubuntu服务器\r\n`$ scp dubbo-monitor-simple-2.5.3-assembly.tar.gz root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 解压dubbo-monitor到指定目录\r\n`# tar -zxvf dubbo-monitor-simple-2.5.3-assembly.tar.gz -C /root/install/`\r\n\r\n### 4. 配置\r\n修改`conf/dubbo.properties`中`dubbo.registry.address`的值：\r\n\r\n`dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181`\r\n\r\n### 5. 启动\r\n`# ./bin/start.sh`\r\n\r\n### 6. 停止\r\n`# ./bin/stop.sh`\r\n\r\n### 7. 重启\r\n`# ./bin/restart.sh`\r\n\r\n### 8. 访问\r\nhttp://kangyonggan.com:8080/  \r\n界面如下:\r\n\r\n![dubbo-monitor](http://cdn.kangyonggan.com/upload/20161218/20161218022228172.png)\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:22:28', '2017-01-02 15:07:41'),
  (10, 'Ubuntu14.0.4安装及配置系列 - dubbo-admin的安装配置', '安装配置', '### 1. 上传本地dubbo-admin到Ubuntu服务器\r\n`$ scp dubbo-admin.war root@121.40.66.176:/root/soft/`\r\n\r\n### 2. 解压dubbo-monitor到tomcat/webapps/ROOT/目录下\r\n`# unzip dubbo-admin.war -d /root/install/apache-tomcat-8.5.6/webapps/ROOT/`\r\n\r\n### 3. 配置\r\n修改`webapps/ROOT/WEB-INF/dubbo.properties`中`dubbo.registry.address`的值：\r\n\r\n`dubbo.registry.address=zookeeper://121.40.66.176:2181?backup=139.196.28.125:2181`\r\n\r\n修改tomcat的server.xml：\r\n\r\n```xml\r\n<Connector port=\"9090\" protocol=\"HTTP/1.1\"\r\n               connectionTimeout=\"20000\"\r\n               redirectPort=\"8443\" />\r\n```\r\n\r\n### 4. 启动\r\n`# sh bin/startup.sh`\r\n\r\n### 5. 停止\r\n`# sh bin/shutdown.sh`\r\n\r\n### 6. 访问\r\nhttp://kangyonggan.com:9090/  \r\n\r\n- 用户名:\r\n- 密码:\r\n\r\n登录后界面如下:\r\n\r\n![dubbo-admin](http://cdn.kangyonggan.com/upload/20161218/20161218022315633.png)\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:23:15', '2017-01-02 15:07:26'),
  (11, 'SSH 免密登录', 'Linux', '现在有两台机器A和B， 想要用ssh从A登录到B， 并且不使用密码\r\n\r\n### 1. 在A机器上生成密钥对\r\n`ssh-keygen -t rsa`\r\n\r\n然后会有三次提示用户输入， 什么也不要输入， 直接回车， 就会在用户根目录生成`.ssh`文件夹, 文件夹里会有`id_rsa`私钥和`id_rsa.pub`公钥\r\n\r\n### 2. 把公钥导入B机器\r\n`ssh-copy-id -i .ssh/id_rsa.pub root@192.168.20.212`\r\n\r\n执行这个命令会要求输入一次密码， 不过以后就不用再输密码了。  \r\n如果A机器没安装ssh-copy-id命令， 也可以手动导入， 先把公钥scp到B机器（也要输入一次密码），   \r\n然后输出到.ssh/authorized_keys文件中即可\r\n\r\n`cat id_rsa.pub > .ssh/authorized_keys`\r\n\r\n### 3. 免密登录测试\r\n\r\n`ssh root@192.168.20.212`\r\n', 'kangyonggan', '康永敢', 0, '2016-12-17 10:31:51', '2016-12-17 22:56:14'),
  (12, 'log4j2的使用和配置', 'Java', '### 一、引入依赖\r\n```xml\r\n<log4j2.api.version>2.5</log4j2.api.version>\r\n\r\n...\r\n\r\n<!--Log4j2-->\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-api</artifactId>\r\n    <version>${log4j2.api.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>${log4j2.api.version}</version>\r\n</dependency>            \r\n```\r\n\r\n### 二、配置`log4j2.xml`\r\n\r\n1. 异步输出日志，不会影响主线程性能\r\n2. error日志单独输出到error.log文件\r\n3. all.log包含所有级别的日志\r\n4. 每天会备份旧的日志文件，产生新的日志文件\r\n5. 如果一天之中有日志文件超出大小限制(下面配的500M)，会存档当前文件，另外再创建一个新的文件\r\n6. 日志文件只保存近期的（下面配置的30天）\r\n\r\n这已经可以满足大部分需求了，如果还不满足，那就再改造吧\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\" monitorInterval=\"300\">\r\n    <properties>\r\n        <property name=\"LOG_HOME\">/Users/kyg/logs/test</property>\r\n    </properties>\r\n\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n        </Console>\r\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\r\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"/>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"/>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"/>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\r\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"/>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"/>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"/>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"/>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\r\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <Async name=\"AsyncAll\">\r\n            <AppenderRef ref=\"AllFile\"/>\r\n        </Async>\r\n        <Async name=\"AsyncError\">\r\n            <AppenderRef ref=\"ErrorFile\"/>\r\n        </Async>\r\n    </Appenders>\r\n\r\n    <Loggers>\r\n        <Root level=\"debug\" additivity=\"true\">\r\n            <AppenderRef ref=\"Console\"/>\r\n            <AppenderRef ref=\"AsyncAll\"/>\r\n            <AppenderRef ref=\"AsyncError\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```\r\n\r\n> 温馨提示：支持占位符', 'kangyonggan', '康永敢', 0, '2016-12-17 10:36:05', '2016-12-28 08:35:29'),
  (13, '.gitignore', 'Java', '```\r\n# Maven #\r\ntarget/\r\n\r\n# IDEA #\r\n.idea/\r\n*.iml\r\n\r\n# Eclipse #\r\n.settings/\r\n.metadata/\r\n.classpath\r\n.project\r\nServers/\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-17 22:53:08', '2016-12-18 17:41:34'),
  (14, '数据库垂直拆分', '数据库', '> 原文: [一分钟掌握数据库垂直拆分](https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&mid=2651959773&idx=1&sn=7e4ad0dcd050f6662dfaf39d9de36f2c&chksm=bd2d04018a5a8d17b92098b4840aac23982e32d179cdd957e4c55011f6a08f6bd31f9ba5cfee&scene=0&key=564c3e9811aee0ab569a7c0cf0fec2e9951b47e1558e2eba479aa4586f613f1466391cbeb4f73d853437fe4fb4249617be06fcd0bdfff0d236dd9328a2725ba2a81dd25a04f8e837bfb7b2de08f1ce38&ascene=0&uin=MzE3ODAyODM0Mg%3D%3D&devicetype=iMac+MacBookPro11%2C4+OSX+OSX+10.12+build&version=12010110&nettype=WIFI&fontScale=100&pass_ticket=BWwhfr0EkpciW2l%2B%2B11CnZoyjMobfYu8fgfGHs%2FZP06yl%2Bc9lP4EMz7CoCMeqNeb)\r\n\r\n## 一、缘起\r\n当数据库的数据量非常大时，水平切分和垂直拆分是两种常见的降低数据库大小，提升性能的方法。假设有用户表：\r\n\r\n```\r\nuser(\r\nuid bigint,\r\nname varchar(16),\r\npass varchar(16),\r\nage int,\r\nsex tinyint,\r\nflag tinyint,\r\nsign varchar(64),\r\nintro varchar(256)\r\n…);\r\n```\r\n\r\n**水平切分是指**，`以某个字段为依据（例如uid），按照一定规则（例如取模），将一个库（表）上的数据拆分到多个库（表）上`，以降低单库（表）大小，达到提升性能的目的的方法，水平切分后，各个库（表）的特点是：  \r\n- 每个库（表）的`结构都一样`\r\n- 每个库（表）的`数据都不一样，没有交集`\r\n- 所有库（表）的`并集是全量数据`\r\n\r\n## 二、什么是垂直拆分\r\n垂直拆分是指，`将一个属性较多，一行数据较大的表，将不同的属性拆分到不同的表中`，以降低单库（表）大小，达到提升性能的目的的方法，垂直切分后，各个库（表）的特点是：  \r\n- 每个库（表）的`结构都不一样`\r\n- 一般来说，每个库（表）的`属性至少有一列交集，一般是主键`\r\n- 所有库（表）的`并集是全量数据`\r\n还是以上文提到的用户表为例，如果要垂直拆分，可能拆分结果会是这样的:  \r\n \r\n```\r\nuser_base(\r\nuid bigint,\r\nname varchar(16),\r\npass varchar(16),\r\nage int,\r\nsex tinyint,\r\nflag tinyint,\r\n…);\r\n \r\nuser_ext(\r\nuid bigint, \r\nsign varchar(64),\r\nintro varchar(256)\r\n…);\r\n```\r\n\r\n## 三、垂直切分的依据是什么\r\n当一个表属性很多时，如何来进行垂直拆分呢？如果没有特殊情况，拆分依据主要有几点：  \r\n- 将`长度较短，访问频率较高`的属性尽量放在一个表里，这个表暂且称为主表\r\n- 将`字段较长，访问频率较低`的属性尽量放在一个表里，这个表暂且称为扩展表\r\n- `经常一起访问的属性`，也可以放在一个表里（如果1和2都满足，还可以考虑第三点）\r\n\r\n优先考虑1和2，第3点不是必须。另，如果实在属性过多，主表和扩展表都可以有多个。\r\n \r\n一般来说，数据量并发量比较大时，数据库的上层都会有一个服务层。需要注意的是，当应用方需要`同时访问主表和扩展表中的属性时，服务层不要使用join来连表访问，而应该分两次进行查询`：\r\n\r\n![](http://kangyonggan.com/upload/20161221/20161221171817743.png)\r\n\r\n原因是，大数据高并发互联网场景下，一般来说，**吞吐量和扩展性**是主要矛盾：  \r\n- join更消损耗数据库性能\r\n- join会让base表和ext表耦合在一起（必须在一个数据库实例上），`不利于数据量大时拆分到不同的数据库实例上`（机器上）。毕竟减少数据量，提升性能才是垂直拆分的初衷。\r\n\r\n## 四、为什么要这么这么拆分\r\n为何要将字段短，访问频率高的属性放到一个表内？为何这么垂直拆分可以提升性能？因为：  \r\n- 数据库有自己的内存buffer，会将磁盘上的数据load到内存buffer里（暂且理解为进程内缓存吧）\r\n- `内存buffer缓存数据是以row为单位的`\r\n- 在内存有限的情况下，在数据库内存buffer里缓存短row，就能缓存更多的数据\r\n- 在数据库内存buffer里缓存访问频率高的row，就能提升缓存命中率，减少磁盘的访问\r\n \r\n举个例子就很好理解了：  \r\n假设数据库内存buffer为1G，未拆分的user表1行数据大小为1k，那么只能缓存100w行数据。  \r\n如果垂直拆分成user_base和user_ext，其中：  \r\n- user_base访问频率高（例如uid, name, passwd, 以及一些flag等），一行大小为0.1k\r\n- user_ext访问频率低（例如签名, 个人介绍等），一行大小为0.9k\r\n\r\n那边内存buffer就就能缓存近乎1000w行user_base的记录，访问磁盘的概率会大大降低，数据库访问的时延会大大降低，吞吐量会大大增加。\r\n\r\n## 五、总结\r\n- 水平拆分和垂直拆分都是降低数据量大小，提升数据库性能的常见手段\r\n- 流量大，数据量大时，数据访问要有service层，并且service层`不要通过join来获取主表和扩展表的属性`\r\n- 垂直拆分的依据，尽量把`长度较短，访问频率较高的属性放在主表里`', 'kangyonggan', '康永敢', 0, '2016-12-21 01:18:17', '2016-12-21 01:22:01'),
  (15, '用jdk自带的keytool导入查看删除证书', 'Java', '## 导入证书:\r\n\r\nsudo keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit -alias sh2_test -file /Users/kyg/Downloads/sh2_test.cer\r\n## 删除证书\r\n\r\nsudo keytool -delete -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\r\n\r\n## 查看证书\r\n\r\nkeytool -list -alias sh2_test -keystore /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/security/cacerts -storepass changeit\r\n\r\n## 提示\r\n- 使用时，jdk路径请自行替换\r\n- 一般cacerts的密码默认为changit\r\n- keytool命令在bin目录下', 'kangyonggan', '康永敢', 0, '2016-12-21 01:26:33', '2016-12-21 01:29:08'),
  (16, 'Ubuntu14.0.4安装及配置系列 - jenkins的安装配置', '安装配置', '### 1. 下载[jenkins](jenkins.io/index.html)到本地\r\n\r\n### 2. 上传本地jenkins到Ubuntu服务器\r\n\r\n`$ scp jenkins.war root@121.40.66.176:/root/soft/`\r\n\r\n### 3. 直接把war包放入tomcat的webapps目录下并重启tomcat即可\r\n\r\n### 4. 安装maven插件\r\n去这个地址[http://updates.jenkins-ci.org/download/plugins/](http://updates.jenkins-ci.org/download/plugins/)下载maven插件到本地[maven-plugin.hpi](http://cdn.kangyonggan.com/upload/20170101020115075.hpi)\r\n\r\n然后在jenkins-->系统管理-->管理插件-->高级-->上传插件-->选择maven插件(maven-plugin.hpi)-->上传-->重启\r\n\r\n### 5. jenkins执行shell重启tomcat无效\r\n需要在Post steps中执行`export BUILD_ID=BUILD_BLOG`,如:\r\n\r\n```\r\nexport BUILD_ID=BUILD_BLOG\r\nsh /home/kyg/shell/deploy-blog.sh\r\n```\r\n\r\n### 6. 构建时， 需要指定maven配置\r\n如果没指定， 会使用默认配置，会联网下载依赖到.m2文件夹下，所以需要指定`settings.xml`配置文件的位置, 如下图:\r\n\r\n![jenkins-maven](http://cdn.kangyonggan.com/upload/20170101020115076.png)\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-21 04:33:27', '2017-01-02 15:06:39'),
  (17, 'ubuntu下方向键不好使的解决方案', 'Linux', '先卸载vim-tiny：\r\n\r\n`$ sudo apt-get remove vim-common`\r\n\r\n再安装vim full：\r\n\r\n`$ sudo apt-get install vim`', 'kangyonggan', '康永敢', 0, '2016-12-24 02:27:40', '2016-12-24 02:27:40'),
  (18, 'ubuntu16.0.4启动zookeeper报错', 'Linux', '### 报错信息:  \r\nbin/zkServer.sh: 81: /home/kyg/install/server1/zookeeper-3.4.9/bin/zkEnv.sh: Syntax error: \"(\" unexpected (expecting \"fi\")\r\n\r\n### 解决方案\r\n```\r\nls -l /bin/sh\r\nlrwxrwxrwx 1 root root 4 12月 24 17:22 /bin/sh -> dash\r\nls -l /bin/sh\r\nlrwxrwxrwx 1 root root 4 12月 24 20:01 /bin/sh -> bash\r\n```\r\n\r\n> 需要root权限', 'kangyonggan', '康永敢', 0, '2016-12-24 04:02:44', '2016-12-24 04:02:44'),
  (19, 'mysql数据库定时备份', '数据库', '### 一、创建备份脚本\r\n1. 创建`.bak.sh`, 内容为:\r\n\r\n```\r\n#! /bin/sh\r\n\r\ntoday=`date +%Y%m%d`\r\n\r\n# bak to local\r\nmysqldump -uroot -p123456 blog > /home/kyg/bak/blog-bak-$today.sql\r\n\r\n# bak to remote\r\nscp /home/kyg/bak/blog-bak-$today.sql root@121.40.66.176:/root/bak/\r\n```\r\n\r\n> 其中，备份到远程时，用到了免密登录，请参考我的另一篇博客\r\n\r\n### 二、定时执行\r\n定时执行用的是linux下自带的`crontab`命令\r\n\r\n`crontab -l` 查看任务\r\n\r\n`crontab -e` 编辑任务\r\n\r\n我设置的是，每天凌晨3点执行备份:\r\n\r\n```\r\n# m h  dom mon dow   command\r\n0 3 * * * sh /home/kyg/.bak.sh\r\n```\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-24 05:32:04', '2016-12-28 07:34:34'),
  (20, 'ssh端口转发', 'Linux', '### 1. 转发本地到远端：ssh -C -f -N -g -L 本地端口:远端IP:远端端口 远端用户名@远端IP  \r\n例子：`ssh -C -f -N -g -L 2222:42.196.156.22:22 kyg@42.196.156.22`  \r\n所有请求本地2222端口的请求，都会转发给42.196.156的22端口\r\n\r\n> 网络前提：本地机器一定要能访问远端机器，不要求远端机器能访问本地机器\r\n\r\n### 2. 转发远端到本地：ssh -C -f -N -g –R 远端端口:本地IP:本地端口 远端用户名@远端IP\r\n例子：`ssh -C -f -N -g -R 2323:127.0.0.1:22 root@121.40.66.176`  \r\n所有请求121.40.66.176:2323的请求，都会转发给本地的22端口\r\n\r\n> 网络前提：远端机器一定要能访问本地机器，不要求本地机器能访问远端机器\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-24 05:33:30', '2016-12-29 09:41:00'),
  (21, 'Tomcat 8 访问软连接目录下的文件', 'Bug', '### Tomcat 7:\r\n`<Context allowLinking=\"true\" />`\r\n\r\n### Tomcat 8:\r\n```\r\n<Context>\r\n  <Resources allowLinking=\"true\" />\r\n</Context>\r\n```\r\n\r\n`ln -s /home/kyg/data/blog/upload/ /home/kyg/install/apache-tomcat-8.5.6-blog/webapps/ROOT/WEB-INF/`', 'kangyonggan', '康永敢', 0, '2016-12-24 06:56:31', '2016-12-31 18:07:20'),
  (22, 'ubuntu14.04下配置ftp服务器', 'Linux', '### 1. 下载并安装\r\n`apt-get install vsftpd`\r\n\r\n### 2. ftp服务器启动和重启\r\n启动:`/etc/init.d/vsftpd start`  \r\n重启:`/etc/init.d/vsftpd restart`  \r\n\r\n### 3. 创建ftp用户\r\nftp用户需满足下面条件：  \r\n\r\n- 此用户只是用来使用ftp服务的\r\n- 此用户不可登录服务器\r\n- 此用户不能访问ftp指定文件夹之外的文件\r\n\r\n### 4. 创建用户\r\n```\r\n# 创建一个用户ftp0\r\nuseradd -d /home/ftp0 -m ftp0\r\n# 修改ftp0的密码\r\npasswd ftp0 \r\n```\r\n\r\n### 5. 修改ftp配置\r\n修改`/etc/vsftpd.conf`的几个关键配置:\r\n\r\n```\r\nanonymous_enable=NO 		# 不允许匿名访问\r\nwrite_enable=YES    		# 允许写\r\nlocal_enable=YES 			# 允许本地主机访问\r\nchroot_local_user=YES		# 只能访问自身的目录，此处有坑，需加上下面一行\r\nallow_writeable_chroot=YES	# 允许写自身发目录\r\n```\r\n\r\n### 6. 让用户不能登录\r\n`usermod -s /sbin/nologin ftp0`\r\n\r\n注意，ubuntu下还需要在`/etc/shells`最后加上：`/sbin/nologin`\r\n\r\n> 最后需要重启ftp服务器\r\n\r\n### 7. 测试\r\n```\r\n# ftp\r\nftp> open 192.168.1.100\r\nuser:ftp0\r\npwd:xxxxx\r\nsuccess!\r\n```\r\n\r\n### 8. 附javaftp上传代码\r\n```java\r\npackage com.kangyonggan.api.biz;\r\n\r\nimport org.apache.commons.net.ftp.FTPClient;\r\nimport org.apache.commons.net.ftp.FTPReply;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2016/12/25\r\n */\r\npublic class TestFtp {\r\n\r\n    private FTPClient ftp;\r\n\r\n    /**\r\n     * @param path     上传到ftp服务器哪个路径下\r\n     * @param addr     地址\r\n     * @param port     端口号\r\n     * @param username 用户名\r\n     * @param password 密码\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private boolean connect(String path, String addr, int port, String username, String password) throws Exception {\r\n        boolean result = false;\r\n        ftp = new FTPClient();\r\n        int reply;\r\n        ftp.connect(addr, port);\r\n        ftp.login(username, password);\r\n        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);\r\n        reply = ftp.getReplyCode();\r\n        if (!FTPReply.isPositiveCompletion(reply)) {\r\n            ftp.disconnect();\r\n            return result;\r\n        }\r\n        ftp.changeWorkingDirectory(path);\r\n        result = true;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param file 上传的文件或文件夹\r\n     * @throws Exception\r\n     */\r\n    private void upload(File file) throws Exception {\r\n        if (file.isDirectory()) {\r\n            ftp.makeDirectory(file.getName());\r\n            ftp.changeWorkingDirectory(file.getName());\r\n            String[] files = file.list();\r\n            for (int i = 0; i < files.length; i++) {\r\n                File file1 = new File(file.getPath() + \"\\\\\" + files[i]);\r\n                if (file1.isDirectory()) {\r\n                    upload(file1);\r\n                    ftp.changeToParentDirectory();\r\n                } else {\r\n                    File file2 = new File(file.getPath() + \"\\\\\" + files[i]);\r\n                    FileInputStream input = new FileInputStream(file2);\r\n                    ftp.storeFile(file2.getName(), input);\r\n                    input.close();\r\n                }\r\n            }\r\n        } else {\r\n            File file2 = new File(file.getPath());\r\n            FileInputStream input = new FileInputStream(file2);\r\n            ftp.storeFile(file2.getName(), input);\r\n            input.close();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        TestFtp t = new TestFtp();\r\n        t.connect(\"/home/ftp0/\", \"192.168.1.100\", 21, \"ftp0\", \"123456\");\r\n        File file = new File(\"/Users/kyg/Downloads/blog.sql\");\r\n        t.upload(file);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-26 13:44:11', '2017-01-05 02:35:51'),
  (23, '如何把内网机器变成外网可以访问的服务器', 'Linux', '## 一、环境准备\r\n1. 需要一台内网机器（性能越强越好）【192.168.1.100】\r\n2. 一个有公网IP的路由器，或者移动内网或者电信内网IP都可以【101.245.198.155】\r\n3. 一个公网服务器（不需要内存太大，1G足够）【121.40.66.176】\r\n\r\n> 路由器和公网服务器要能互通，如果不通，可以尝试重启路由器，重启的作用是换一个新的ip，也许就通了\r\n\r\n## 二、步骤\r\n1. 把服务器部署在内网机器上，比如我的博客在内网可以访问:192.168.1.100:8088\r\n2. 登录路由器，配置“端口转发”，把请求路由器8088端口的请求，转发到请求192.168.1.100:8088\r\n3. 登录公网服务器，执行远程端口转发命令：\r\n\r\n`ssh -C -f -N -g -L 80:101.245.198.155:8088 kyg@101.245.198.155`\r\n\r\n表示，请求公网80端口的请求，会被转发到路由器（101.245.198.155）的8088端口\r\n\r\n## 三、保持转发链接不中断（自动重连）\r\n查看任务  \r\n`crontab -l`\r\n\r\n创建任务\r\n`crontab -e`\r\n\r\n每小时重连一次\r\n`0 * * * * sh conn.sh`', 'kangyonggan', '康永敢', 0, '2016-12-26 13:59:10', '2016-12-28 07:39:17'),
  (24, '刚刚安装的ubuntu16.04.1没ssh服务', 'Linux', '在ubuntu16.04.1安装ssh服务，让远程可以用ssh登录\r\n\r\n`sudo apt-get update`\r\n\r\n`sudo apt-get install openssh-server`', 'kangyonggan', '康永敢', 0, '2016-12-27 01:24:54', '2016-12-27 01:24:54'),
  (25, '多环境下autoconfig使用的小例子', 'Java 架构', '### 一、为什么使用Autoconfig\r\n在一个应用中，我们总是会遇到一些参数，例如：\r\n\r\n- 数据库服务器IP地址、端口、用户名；\r\n- 用来保存上传资料的目录。\r\n- 一些参数，诸如是否打开cache、加密所用的密钥名称等等。\r\n\r\n这些参数有一个共性，那就是：它们和应用的逻辑无关，只和当前环境、当前系统用户相关。以下场景很常见：\r\n\r\n- 在开发、测试、发布阶段，使用不同的数据库服务器；\r\n- 在开发阶段，使用Windows的A开发者将用户上传的文件存放在d:\\my_upload目录中，而使用Linux的B开发者将同样的文件存放在/home/myname/my_upload目录中。\r\n- 在开发阶段设置cache=off，在生产环境中设置cache=on。\r\n- 很明显，这些参数不适合被“硬编码”在配置文件或代码中。因为每一个从源码库中取得它们的人，都有可能需要修改它们，使之与自己的环境相匹配, autoconfig就是很好的选择。\r\n\r\n### 二、引入插件\r\n在`pom.xml`中引入插件，下面为多环境配置\r\n\r\n```xml\r\n<plugin.autoconfig.version>1.2</plugin.autoconfig.version>\r\n\r\n...\r\n\r\n<!-- autoconfig -->\r\n<plugin>\r\n    <groupId>com.alibaba.citrus.tool</groupId>\r\n    <artifactId>autoconfig-maven-plugin</artifactId>\r\n    <version>${plugin.autoconfig.version}</version>\r\n    <executions>\r\n        <execution>\r\n            <id>compile</id>\r\n            <phase>compile</phase>\r\n            <goals>\r\n                <goal>autoconfig</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <configuration>\r\n        <userProperties>${antx.path}</userProperties>\r\n    </configuration>\r\n</plugin>\r\n\r\n...\r\n\r\n<profiles>\r\n    <profile>\r\n        <id>dev</id>\r\n        <activation>\r\n            <activeByDefault>true</activeByDefault>\r\n        </activation>\r\n        <properties>\r\n            <antx.path>${user.home}/antx-dev.properties</antx.path>\r\n        </properties>\r\n    </profile>\r\n    <profile>\r\n        <id>prod</id>\r\n        <properties>\r\n            <antx.path>${user.home}/antx-prod.properties</antx.path>\r\n        </properties>\r\n    </profile>\r\n</profiles>\r\n```\r\n\r\n### 三、配置\r\n在`src/main/resources`下创建目录`Meta-INF/autoconfig`，在目录下创建文件`auto-config.xml`, 下面是我的配置（依个人而定）:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<config>\r\n    <group>\r\n        <!-- dubbo -->\r\n        <property name=\"api.dubbo.name\" description=\"项目名字\" defaultValue=\"api\"></property>\r\n        <property name=\"api.dubbo.registry.address\" description=\"dubbo注册地址\"\r\n                  defaultValue=\"zookeeper://127.0.0.1:2181?backup=127.0.0.1:2182,127.0.0.1:2183\"></property>\r\n        <property name=\"api.dubbo.protocol.port\" description=\"dubbo注册端口\" defaultValue=\"-1\"></property>\r\n        <property name=\"api.dubbo.timeout\" description=\"dubbo超时时间\" defaultValue=\"10000\"></property>\r\n        <property name=\"api.dubbo.api.version\" description=\"api提供接口的版本\" defaultValue=\"1.0.0\"></property>\r\n\r\n        <!-- redis -->\r\n        <property name=\"api.redis.maxTotal\" description=\"redis最大连接数\" defaultValue=\"1000\"></property>\r\n        <property name=\"api.redis.minIdle\" description=\"redis最小等待数\" defaultValue=\"50\"></property>\r\n        <property name=\"api.redis.maxIdle\" description=\"redis最大等待数\" defaultValue=\"100\"></property>\r\n        <property name=\"api.redis.testOnBorrow\" description=\"redis测试支持\" defaultValue=\"true\"></property>\r\n        <property name=\"api.redis.host\" description=\"redis主机ip\" defaultValue=\"127.0.0.1\"></property>\r\n        <property name=\"api.redis.port\" description=\"redis主机端口\" defaultValue=\"6379\"></property>\r\n        <property name=\"api.redis.password\" description=\"redis密码\" defaultValue=\"123456\"></property>\r\n\r\n        <!--jdbc-->\r\n        <property name=\"api.jdbc.driver\" description=\"jdbc驱动\" defaultValue=\"com.mysql.jdbc.Driver\"></property>\r\n        <property name=\"api.jdbc.url\" description=\"jdbc地址\" defaultValue=\"jdbc:mysql://127.0.0.1:3306/api\"></property>\r\n        <property name=\"api.jdbc.username\" description=\"jdbc用户名\" defaultValue=\"root\"></property>\r\n        <property name=\"api.jdbc.password\" description=\"jdbc密码\" defaultValue=\"123456\"></property>\r\n\r\n        <!-- log4j2 -->\r\n        <property name=\"api.log4j2.home\" description=\"log4j2日志的文件主目录\" defaultValue=\"/root/logs/api\"></property>\r\n\r\n        <property name=\"api.slow.method.time\" description=\"慢方法时间(秒)\" defaultValue=\"10\"></property>\r\n        <property name=\"api.slow.interface.time\" description=\"慢接口时间(秒)\" defaultValue=\"10\"></property>\r\n        <property name=\"api.redis.prefix.key\" description=\"redis键的前缀\" defaultValue=\"api\"></property>\r\n        <property name=\"api.cache.open\" description=\"是否开启缓存,Y:开启,N:不开启\" defaultValue=\"Y\"></property>\r\n    </group>\r\n    <script>\r\n        <generate template=\"app.properties\"></generate>\r\n        <generate template=\"applicationContext-datasource.xml\"></generate>\r\n        <generate template=\"applicationContext-provider.xml\"></generate>\r\n        <generate template=\"applicationContext-redis.xml\"></generate>\r\n        <generate template=\"log4j2.xml\"></generate>\r\n    </script>\r\n</config>\r\n```\r\n\r\n### 四、使用\r\n在上一步中可以看到antx将会替换五个文件，下面是其中一个文件的配置`applicationContext-redis.xml`:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:p=\"http://www.springframework.org/schema/p\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\nohttp://www.springframework.org/schema/beans/spring-beans-4.0.xsd\">\r\n\r\n    <bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\r\n        <property name=\"maxTotal\" value=\"${api.redis.maxTotal}\"></property>\r\n        <property name=\"minIdle\" value=\"${api.redis.minIdle}\"></property>\r\n        <property name=\"maxIdle\" value=\"${api.redis.maxIdle}\"></property>\r\n        <property name=\"testOnBorrow\" value=\"${api.redis.testOnBorrow}\"></property>\r\n    </bean>\r\n\r\n    <bean id=\"jedisConnectionFactory\" class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\r\n          p:hostName=\"${api.redis.host}\" p:port=\"${api.redis.port}\" p:password=\"${api.redis.password}\" p:poolConfig-ref=\"poolConfig\"></bean>\r\n\r\n    <bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\">\r\n        <property name=\"connectionFactory\" ref=\"jedisConnectionFactory\"></property>\r\n        <property name=\"keySerializer\">\r\n            <bean class=\"org.springframework.data.redis.serializer.StringRedisSerializer\" ></bean>\r\n        </property>\r\n        <property name=\"valueSerializer\">\r\n            <bean class=\"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer\"></bean>\r\n        </property>\r\n    </bean>\r\n</beans>\r\n```\r\n\r\n> 在项目`mvn clean install`的时候，antx会自动替换它所包含的文件，可以再`target`目录下查看指定的文件是否被替换成功', 'kangyonggan', '康永敢', 0, '2016-12-28 08:24:50', '2017-01-09 07:25:29'),
  (26, 'Mybatis Generator集成MapperPlugin、LombokPlugin和SerializablePlugin', 'Java 架构', '### 一、 `MBG`集成`MapperPlugin`、`LombokPlugin`和`SerializablePlugin`\r\n可以生成的持久层代码:  \r\n\r\n- 生成BeanMapper.java\r\n- 生成BeanMapper.xml\r\n- 生成Bean.java\r\n\r\n### 二、特点\r\n- 生成的Mapper.java继承了MyMapper.java(所有单表的crud全部不用写SQL)\r\n- 实体bean拥有@Data注解（免去写getter、setter和toString的烦恼）\r\n- 实体bean实现Serializable接口，可以放心的放入Redis缓存或传输如分布式系统间（如:dubbo）\r\n\r\n> 坑：生成的Mapper.java，默认不带注解`@Repository`，如果你又没用spring扫描mapper包， 在运行时会报错，是运行时而不是启动时。\r\n\r\n### 三、引入依赖和插件\r\n`pom.xml`中的配置:\r\n\r\n```xml\r\n<plugin.mybatis-generator.version>1.3.2</plugin.mybatis-generator.version>\r\n<mybatis-generator.version>1.3.2</mybatis-generator.version>\r\n<mybatis-mapper.version>3.3.8</mybatis-mapper.version>\r\n<lombok.version>1.16.8</lombok.version>\r\n         \r\n...\r\n\r\n<!--MBG plugin-->\r\n<plugin>\r\n    <groupId>org.mybatis.generator</groupId>\r\n    <artifactId>mybatis-generator-maven-plugin</artifactId>\r\n    <version>${plugin.mybatis-generator.version}</version>\r\n    <configuration>\r\n        <verbose>true</verbose>\r\n        <overwrite>true</overwrite>\r\n    </configuration>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>${project.groupId}</groupId>\r\n            <artifactId>api-dao</artifactId>\r\n            <version>${project.version}</version>\r\n        </dependency>\r\n    </dependencies>\r\n</plugin>\r\n\r\n<dependency>\r\n    <groupId>org.mybatis.generator</groupId>\r\n    <artifactId>mybatis-generator-core</artifactId>\r\n    <version>${mybatis-generator.version}</version>\r\n    <scope>compile</scope>\r\n    <optional>true</optional>\r\n</dependency>\r\n<dependency>\r\n    <groupId>tk.mybatis</groupId>\r\n    <artifactId>mapper</artifactId>\r\n    <version>${mybatis-mapper.version}</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>${lombok.version}</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```\r\n\r\n> 提示：MBG插件之所以依赖dao, 是因为我在插件中使用了dao中的两个类,下面有。\r\n\r\n### 四、代码和插件配置\r\n\r\n`MyMapper.java`\r\n\r\n```java\r\npackage com.kangyonggan.api.mapper;\r\n\r\nimport org.springframework.stereotype.Component;\r\nimport tk.mybatis.mapper.common.ConditionMapper;\r\nimport tk.mybatis.mapper.common.ExampleMapper;\r\nimport tk.mybatis.mapper.common.SqlServerMapper;\r\nimport tk.mybatis.mapper.common.base.BaseDeleteMapper;\r\nimport tk.mybatis.mapper.common.base.BaseSelectMapper;\r\nimport tk.mybatis.mapper.common.base.BaseUpdateMapper;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 16/5/12\r\n */\r\n@Component\r\npublic interface MyMapper<T> extends\r\n        BaseSelectMapper<T>,\r\n        BaseUpdateMapper<T>,\r\n        BaseDeleteMapper<T>,\r\n        ExampleMapper<T>,\r\n        ConditionMapper<T>,\r\n        SqlServerMapper<T> {\r\n}\r\n```\r\n\r\n`LombokPlugin.java`\r\n\r\n```java\r\npackage com.kangyonggan.api.mapper.util;\r\n\r\nimport org.mybatis.generator.api.IntrospectedColumn;\r\nimport org.mybatis.generator.api.IntrospectedTable;\r\nimport org.mybatis.generator.api.PluginAdapter;\r\nimport org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;\r\nimport org.mybatis.generator.api.dom.java.Method;\r\nimport org.mybatis.generator.api.dom.java.TopLevelClass;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 16/5/12\r\n */\r\npublic class LombokPlugin extends PluginAdapter {\r\n    private FullyQualifiedJavaType dataAnnotation = new FullyQualifiedJavaType(\"lombok.Data\");\r\n\r\n    public boolean validate(List<String> warnings) {\r\n        return true;\r\n    }\r\n\r\n    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\r\n        this.addDataAnnotation(topLevelClass);\r\n        return true;\r\n    }\r\n\r\n    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\r\n        this.addDataAnnotation(topLevelClass);\r\n        return true;\r\n    }\r\n\r\n    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {\r\n        this.addDataAnnotation(topLevelClass);\r\n        return true;\r\n    }\r\n\r\n    public boolean modelGetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {\r\n        return false;\r\n    }\r\n\r\n    public boolean modelSetterMethodGenerated(Method method, TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn, IntrospectedTable introspectedTable, ModelClassType modelClassType) {\r\n        return false;\r\n    }\r\n\r\n    protected void addDataAnnotation(TopLevelClass topLevelClass) {\r\n        topLevelClass.addImportedType(this.dataAnnotation);\r\n        topLevelClass.addAnnotation(\"@Data\");\r\n    }\r\n}\r\n```\r\n\r\n配置插件`generatorConfig.xml`, 插件放在dao模块的`src/main/resources`目录下即可\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE generatorConfiguration PUBLIC\r\n        \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\r\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\r\n<generatorConfiguration>\r\n    <context id=\"sqlContext\" targetRuntime=\"MyBatis3Simple\" defaultModelType=\"flat\">\r\n\r\n        <property name=\"beginningDelimiter\" value=\"`\"></property>\r\n        <property name=\"endingDelimiter\" value=\"`\"></property>\r\n\r\n        <!--base mapper-->\r\n        <plugin type=\"tk.mybatis.mapper.generator.MapperPlugin\">\r\n            <property name=\"mappers\" value=\"com.kangyonggan.api.mapper.MyMapper\"></property>\r\n        </plugin>\r\n\r\n        <!--serialize plugin-->\r\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\"></plugin>\r\n\r\n        <!--lombok plugin-->\r\n        <plugin type=\"com.kangyonggan.api.mapper.util.LombokPlugin\"></plugin>\r\n\r\n        <!--jdbc driver-->\r\n        <jdbcConnection driverClass=\"com.mysql.jdbc.Driver\"\r\n                        connectionURL=\"jdbc:mysql://127.0.0.1:3306/api\"\r\n                        userId=\"root\" password=\"123456\"></jdbcConnection>\r\n\r\n        <!--Xxx.java-->\r\n        <javaModelGenerator targetPackage=\"com.kangyonggan.api.model.vo\"\r\n                            targetProject=\"../api-model/src/main/java\">\r\n            <property name=\"enableSubPackages\" value=\"true\"></property>\r\n            <property name=\"trimStrings\" value=\"true\"></property>\r\n        </javaModelGenerator>\r\n\r\n        <!--XxxMapper.xml-->\r\n        <sqlMapGenerator targetPackage=\"mapper\" targetProject=\"src/main/resources\">\r\n            <property name=\"enableSubPackages\" value=\"true\"></property>\r\n        </sqlMapGenerator>\r\n\r\n        <!--XxxMapper.java-->\r\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.kangyonggan.api.mapper\"\r\n                             targetProject=\"src/main/java\">\r\n            <property name=\"enableSubPackages\" value=\"true\"></property>\r\n        </javaClientGenerator>\r\n\r\n        <!--table name-->\r\n        <table tableName=\"table_name\">\r\n            <generatedKey column=\"id\" sqlStatement=\"Mysql\" identity=\"true\"></generatedKey>\r\n        </table>\r\n    </context>\r\n</generatorConfiguration>\r\n```\r\n\r\n### 五、使用\r\n1. 在项目跟目录下`mvn clean install`, 目的是打包`xxx-dao.jar`，好让插件去依赖\r\n2. 使用 IntelliJ IDEA的，请参考下图(两步), 其他工具我不用，请自行摸索\r\n\r\n![使用说明](http://cdn.kangyonggan.com/upload/20170105191303945.png)\r\n\r\n\r\n> 温馨提示：以上配置是我个人配置，请勿直接使用，使用前请自行改造。', 'kangyonggan', '康永敢', 0, '2016-12-28 09:12:43', '2017-01-09 07:24:56'),
  (27, '使用aop和自定义注解打印出参入参日志和方法执行时间', 'Java 架构', '### 一、自定义注解\r\n`LogTime.java`:\r\n\r\n```java\r\npackage com.kangyonggan.api.common.annotation;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * 在方法上加此注解会打印入参和出参，会计算方法消耗的时间\r\n *\r\n * @author kangyonggan\r\n * @since 2016/12/8\r\n */\r\n@Documented\r\n@Inherited\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface LogTime {\r\n}\r\n```\r\n\r\n### 二、主要逻辑：\r\n\r\n```java\r\npackage com.kangyonggan.api.common.aop;\r\n\r\nimport com.kangyonggan.api.common.annotation.LogTime;\r\nimport com.kangyonggan.api.common.util.AopUtil;\r\nimport com.kangyonggan.api.common.util.DateUtils;\r\nimport com.kangyonggan.api.common.util.PropertiesUtil;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.reflect.MethodSignature;\r\n\r\nimport java.lang.reflect.Method;\r\n\r\n/**\r\n * 切于内部service的实现方法上， 需要在方法上手动加上@LogTime注解， 打印入参和出参，打印方法执行时间, 慢方法打印error日志\r\n *\r\n * @author kangyonggan\r\n * @since 2016/11/30\r\n */\r\n@Log4j2\r\npublic class LogAop {\r\n\r\n    /**\r\n     * 设定的方法最大执行时间\r\n     */\r\n    private Long slowMethodTime;\r\n\r\n    public LogAop() {\r\n        String val = PropertiesUtil.getPropertiesOrDefault(\"slow.method.time\", \"10\");\r\n        slowMethodTime = Long.parseLong(val);\r\n    }\r\n\r\n    /**\r\n     * @param joinPoint\r\n     * @return\r\n     * @throws Throwable\r\n     */\r\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        Object args[] = joinPoint.getArgs();\r\n        Class clazz = joinPoint.getTarget().getClass();\r\n\r\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\r\n        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\r\n        String targetName = \"[\" + clazz.getName() + \".\" + method.getName() + \"]\";\r\n\r\n        LogTime logTime = method.getAnnotation(LogTime.class);\r\n        Object result;\r\n        if (logTime != null) {\r\n            log.info(\"进入方法:\" + targetName + \" - args:\" + AopUtil.getStringFromRequest(args));\r\n\r\n            long beginTime = DateUtils.getNow().getTime();\r\n            result = joinPoint.proceed(args);\r\n            long endTime = DateUtils.getNow().getTime();\r\n            long time = endTime - beginTime;\r\n\r\n            log.info(\"离开方法:\" + targetName + \" - return:\" + AopUtil.getStringFromResponse(result));\r\n            log.info(\"方法耗时:\" + time + \"ms - \" + targetName);\r\n\r\n            if (time > slowMethodTime * 1000) {\r\n                log.error(\"方法执行超过设定时间\" + slowMethodTime + \"s,\" + targetName);\r\n            }\r\n        } else {\r\n            result = joinPoint.proceed(args);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n```\r\n\r\n\r\n其中用到的`AopUtil.java`:\r\n\r\n```java\r\npackage com.kangyonggan.api.common.util;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2016/11/30\r\n */\r\npublic class AopUtil {\r\n    public static String getStringFromRequest(Object[] args) {\r\n        String req = \"\";\r\n        for (Object arg : args) {\r\n            if (arg == null) {\r\n                req = req + \"null,\";\r\n                continue;\r\n            } else if (arg instanceof List == true) {\r\n                req = req + JSON.toJSONString(arg);\r\n            } else if (arg.getClass().isArray()) {\r\n                req = req + JSONArray.toJSONString(arg);\r\n            } else if (arg instanceof Enum) {\r\n                req = req + JSON.toJSONString(arg) + \",\";\r\n            } else if (!(arg instanceof String)\r\n                    && !(arg instanceof BigDecimal)\r\n                    && !(arg instanceof Boolean)\r\n                    && !(arg instanceof Integer)\r\n                    && (arg instanceof Object)) {\r\n                req = req + JSON.toJSONString(arg) + \",\";\r\n            } else {\r\n                req = req + arg.toString() + \",\";\r\n            }\r\n        }\r\n\r\n        if (StringUtils.isNotEmpty(req) && req.length() > 100) {\r\n            return req.hashCode() + \"\";\r\n        } else {\r\n            return req;\r\n        }\r\n    }\r\n\r\n    public static String getStringFromResponse(Object arg) {\r\n        String rsp = \"\";\r\n        if (arg == null) {\r\n            rsp = rsp + \"null,\";\r\n            return rsp;\r\n        } else if (arg instanceof List) {\r\n            rsp = rsp + JSON.toJSONString(arg);\r\n            return rsp;\r\n        } else if (arg instanceof Enum) {\r\n            rsp = rsp + JSON.toJSONString(arg);\r\n            return rsp;\r\n        } else if (!(arg instanceof String)\r\n                && !(arg instanceof BigDecimal)\r\n                && !(arg instanceof Boolean)\r\n                && !(arg instanceof Integer)\r\n                && (arg instanceof Object)) {\r\n            rsp = rsp + JSON.toJSONString(arg) + \",\";\r\n        } else {\r\n            rsp = rsp + arg.toString() + \",\";\r\n        }\r\n        return rsp;\r\n    }\r\n}\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-28 09:37:26', '2017-01-09 07:23:56'),
  (28, '使用aop、自定义注解和redis实现缓存的自动管理', 'Java 架构', '### 一、注解\r\n\r\n`CacheDelete.java`:\r\n\r\n```java\r\npackage com.kangyonggan.api.common.annotation;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * 删除缓存\r\n *\r\n * @author kangyonggan\r\n * @since 2016/12/8\r\n */\r\n@Documented\r\n@Inherited\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface CacheDelete {\r\n\r\n    String value();\r\n\r\n}\r\n\r\n```\r\n\r\n`CacheDeleteAll.java`:\r\n\r\n```java\r\npackage com.kangyonggan.api.common.annotation;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * 删除全部缓存，like\r\n *\r\n * @author kangyonggan\r\n * @since 2016/12/8\r\n */\r\n@Documented\r\n@Inherited\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface CacheDeleteAll {\r\n\r\n    String value();\r\n\r\n}\r\n\r\n```\r\n\r\n`CacheGetOrSave.java`:\r\n\r\n```java\r\npackage com.kangyonggan.api.common.annotation;\r\n\r\nimport java.lang.annotation.*;\r\n\r\n/**\r\n * 有缓存就走缓存，没缓存的最后放入缓存\r\n *\r\n * @author kangyonggan\r\n * @since 2016/12/8\r\n */\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Inherited\r\n@Documented\r\npublic @interface CacheGetOrSave {\r\n\r\n    String value();\r\n\r\n    long timeout() default 0L;\r\n\r\n}\r\n\r\n```\r\n\r\n### 二、主要逻辑\r\n\r\n```java\r\npackage com.kangyonggan.api.common.aop;\r\n\r\nimport com.kangyonggan.api.common.annotation.CacheDelete;\r\nimport com.kangyonggan.api.common.annotation.CacheDeleteAll;\r\nimport com.kangyonggan.api.common.annotation.CacheGetOrSave;\r\nimport com.kangyonggan.api.common.service.RedisService;\r\nimport com.kangyonggan.api.common.util.PropertiesUtil;\r\nimport com.kangyonggan.api.common.util.StringUtil;\r\nimport lombok.Setter;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.reflect.MethodSignature;\r\n\r\nimport java.lang.reflect.Method;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * 切于biz层所有方法上，需要手动加上@CacheXxx相关注解\r\n *\r\n * @author kangyonggan\r\n * @since 2016/11/30\r\n */\r\n@Log4j2\r\npublic class CacheAop {\r\n\r\n    @Setter\r\n    private RedisService redisService;\r\n\r\n    /**\r\n     * redis键的前缀\r\n     */\r\n    private String prefix = PropertiesUtil.getProperties(\"redis.prefix.key\") + \":\";\r\n\r\n    /**\r\n     * 是否打开缓存\r\n     */\r\n    private boolean isOpenCache = PropertiesUtil.getProperties(\"cache.open\").equals(\"Y\");\r\n\r\n    /**\r\n     * @param joinPoint\r\n     * @return\r\n     * @throws Throwable\r\n     */\r\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        Object args[] = joinPoint.getArgs();\r\n\r\n        if (!isOpenCache) {\r\n            return joinPoint.proceed(args);\r\n        }\r\n\r\n        Class clazz = joinPoint.getTarget().getClass();\r\n\r\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\r\n        Method method = clazz.getMethod(methodSignature.getName(), methodSignature.getParameterTypes());\r\n        String targetName = \"[\" + clazz.getName() + \".\" + method.getName() + \"]\";\r\n\r\n        CacheGetOrSave cacheGetOrSave = method.getAnnotation(CacheGetOrSave.class);\r\n        if (cacheGetOrSave != null) {\r\n            return doGetOrSave(joinPoint, targetName, cacheGetOrSave);\r\n        }\r\n        CacheDelete cacheDelete = method.getAnnotation(CacheDelete.class);\r\n        if (cacheDelete != null) {\r\n            doDelete(joinPoint, targetName, cacheDelete);\r\n        }\r\n        CacheDeleteAll cacheDeleteAll = method.getAnnotation(CacheDeleteAll.class);\r\n        if (cacheDeleteAll != null) {\r\n            doDeleteAll(joinPoint, targetName, cacheDeleteAll);\r\n        }\r\n\r\n        return joinPoint.proceed(args);\r\n    }\r\n\r\n    /**\r\n     * 处理@CacheGetOrSave\r\n     *\r\n     * @param joinPoint\r\n     * @param targetName\r\n     * @param cacheGetOrSave\r\n     * @return\r\n     * @throws Throwable\r\n     */\r\n    private Object doGetOrSave(ProceedingJoinPoint joinPoint, String targetName, CacheGetOrSave cacheGetOrSave) throws Throwable {\r\n        Object args[] = joinPoint.getArgs();\r\n        String key = cacheGetOrSave.value();\r\n\r\n        key = prefix + doKey(key, args);\r\n\r\n        Object val = null;\r\n        try {\r\n            val = redisService.get(key);\r\n        } catch (Exception e) {\r\n            log.error(\"@CacheGetOrSave出错了\", e);\r\n        }\r\n        if (val != null) {\r\n            log.info(targetName + \"走缓存,key=\" + key);\r\n            // 走缓存\r\n            return val;\r\n        }\r\n        log.info(\"缓存中没数据，不走缓存\");\r\n        val = joinPoint.proceed(args);\r\n\r\n        long timeout = cacheGetOrSave.timeout();\r\n\r\n        try {\r\n            // 把值放入缓存\r\n            if (timeout > 0) {\r\n                redisService.set(key, val, timeout);\r\n            } else {\r\n                redisService.set(key, val);\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"@CacheGetOrSave出错了\", e);\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * 处理key\r\n     *\r\n     * @param key\r\n     * @param args\r\n     * @return\r\n     */\r\n    private String doKey(String key, Object[] args) {\r\n        try {\r\n            String pattern = \"\\\\{[\\\\w:]+}\";\r\n            Pattern r = Pattern.compile(pattern);\r\n            Matcher m = r.matcher(key);\r\n            while (m.find()) {\r\n                String k = m.group(0);\r\n                if (k.contains(\":\")) {\r\n                    String arr[] = k.substring(1, k.length() - 1).split(\":\");\r\n                    Object obj = args[Integer.parseInt(arr[0])];\r\n                    Method method = obj.getClass().getMethod(\"get\" + StringUtil.firstToUpperCase(arr[1]));\r\n                    Object val = method.invoke(obj);\r\n                    if (val != null) {\r\n                        key = key.replace(k, val.toString());\r\n                    }\r\n                } else {\r\n                    key = key.replace(k, args[Integer.parseInt(k.substring(1, k.length() - 1))].toString());\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"处理key时异常, key=\" + key, e);\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    /**\r\n     * 处理@CacheDelete\r\n     *\r\n     * @param joinPoint\r\n     * @param targetName\r\n     * @param cacheDelete\r\n     */\r\n    private void doDelete(ProceedingJoinPoint joinPoint, String targetName, CacheDelete cacheDelete) {\r\n        String key = doKey(cacheDelete.value(), joinPoint.getArgs());\r\n        try {\r\n            for (String k : key.split(\"\\\\|\\\\|\")) {\r\n                redisService.delete(prefix + k.trim());\r\n            }\r\n            log.info(targetName + \"清除缓存,key=\" + key);\r\n        } catch (Exception e) {\r\n            log.error(\"@CacheDelete出错了\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理@CacheDeleteAll\r\n     *\r\n     * @param joinPoint\r\n     * @param targetName\r\n     * @param cacheDeleteAll\r\n     */\r\n    private void doDeleteAll(ProceedingJoinPoint joinPoint, String targetName, CacheDeleteAll cacheDeleteAll) {\r\n        String key = doKey(cacheDeleteAll.value(), joinPoint.getArgs());\r\n        try {\r\n            for (String k : key.split(\"\\\\|\\\\|\")) {\r\n                redisService.deleteAll(prefix + k.trim() + \"*\");\r\n            }\r\n            log.info(targetName + \"清除所有缓存,key=\" + key);\r\n        } catch (Exception e) {\r\n            log.error(\"@CacheDeleteAllLike出错了\", e);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 三、redis的实现\r\n`RedisServiceImpl.java`:\r\n\r\n```\r\npackage com.kangyonggan.api.biz.service.impl;\r\n\r\nimport com.kangyonggan.api.common.service.RedisService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2016/12/2\r\n */\r\n@Service(\"redisService\")\r\npublic class RedisServiceImpl implements RedisService {\r\n\r\n    @Autowired\r\n    private RedisTemplate<String, Object> redisTemplate;\r\n\r\n    /**\r\n     * set\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @return\r\n     */\r\n    public boolean set(String key, Object value) {\r\n        redisTemplate.opsForValue().set(key, value);\r\n        return Boolean.TRUE.booleanValue();\r\n    }\r\n\r\n    /**\r\n     * set\r\n     *\r\n     * @param key\r\n     * @param value\r\n     * @param value\r\n     * @return\r\n     */\r\n    public boolean set(String key, Object value, long timeout) {\r\n        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);\r\n        return Boolean.TRUE.booleanValue();\r\n    }\r\n\r\n    /**\r\n     * get\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public Object get(String key) {\r\n        return redisTemplate.opsForValue().get(key);\r\n    }\r\n\r\n    /**\r\n     * multiGet\r\n     *\r\n     * @param keys\r\n     * @return\r\n     */\r\n    public List<Object> multiGet(Set<String> keys) {\r\n        return redisTemplate.opsForValue().multiGet(keys);\r\n    }\r\n\r\n    /**\r\n     * delete\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public Object delete(String key) {\r\n        Object object = redisTemplate.opsForValue().get(key);\r\n        if (object != null) {\r\n            redisTemplate.delete(key);\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /**\r\n     * delete all like pattern\r\n     *\r\n     * @param pattern\r\n     * @return\r\n     */\r\n    public void deleteAll(String pattern) {\r\n        redisTemplate.delete(redisTemplate.keys(pattern));\r\n    }\r\n\r\n    /**\r\n     * incr\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public long incr(String key) {\r\n        return redisTemplate.opsForValue().increment(key, 1);\r\n    }\r\n\r\n    /**\r\n     * listLeftPush\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public long listLeftPush(String key, String url) {\r\n        long size = redisTemplate.opsForList().leftPush(key, url);\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * listRightPush\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public long listRightPush(String key, String url) {\r\n        long size = redisTemplate.opsForList().rightPush(key, url);\r\n        return size;\r\n    }\r\n\r\n    /**\r\n     * listRange\r\n     *\r\n     * @param key\r\n     * @return\r\n     */\r\n    public List<Object> listRange(String key, long start, long end) {\r\n        List<Object> list = redisTemplate.opsForList().range(key, start, end);\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * hashSetNx\r\n     *\r\n     * @param hash\r\n     * @param key\r\n     * @param value\r\n     * @return\r\n     */\r\n    public boolean hashSetNx(String hash, String key, String value) {\r\n        return redisTemplate.opsForHash().putIfAbsent(hash, key, value);\r\n    }\r\n\r\n    /**\r\n     * hashSize\r\n     *\r\n     * @param hash\r\n     * @return\r\n     */\r\n    public long hashSize(String hash) {\r\n        return redisTemplate.opsForHash().size(hash);\r\n    }\r\n\r\n    /**\r\n     * hashExist\r\n     *\r\n     * @param hash\r\n     * @param key\r\n     * @return\r\n     */\r\n    public boolean hashExist(String hash, String key) {\r\n        return redisTemplate.opsForHash().hasKey(hash, key);\r\n    }\r\n\r\n    @Override\r\n    public Set<String> getKeys(String pattern) {\r\n        return redisTemplate.keys(pattern);\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 四、注解使用技巧\r\n#### 1. 如果想把一个方法的结果缓存起来， 使用`@CacheGetOrSave`，例如：\r\n```java\r\n@CacheGetOrSave(\"article:id:{0}\")\r\npublic AttachmentResponse<Article> getArticle(Long id) {\r\n    ...\r\n}\r\n\r\n@CacheGetOrSave(\"article:tag:{0:tag}:pageNum:{0:pageNum}:pageSize:{0:pageSize}\")\r\npublic CommonResponse<Article> findArticlesByTag(FindArticlesByTagRequest request) {\r\n    ...\r\n}\r\n```\r\n\r\n#### 2. 如果想在调用一个方法的时候删除指定key的缓存， 使用`@CacheDelete`，例如：\r\n```java\r\n@CacheDelete(\"article:id:{0:id}||dictionary:article:{0:id}\")\r\n@CacheDeleteAll(\"article:tag\")\r\npublic CommonResponse<Article> updateArticle(UpdateArticleRequest request) {\r\n    ...\r\n}\r\n```\r\n\r\n#### 3. 如果想在调用一个方法的时候删除指定`key*`的所有缓存，使用`@CacheDeleteAll`，其中`*`是通配符，不需要用户提供，注解会在key的后面自动追加, 例如：\r\n```java\r\n@CacheDelete(\"article:id:{0:id}||dictionary:article:{0:id}\")\r\n@CacheDeleteAll(\"article:tag\")\r\npublic CommonResponse<Article> updateArticle(UpdateArticleRequest request) {\r\n    ...\r\n}\r\n```\r\n\r\n说明一下，上面的三个注解支持混合使用， 具体请分析上面主要逻辑，注解的`value`支持`||`分割，代表都删除', 'kangyonggan', '康永敢', 0, '2016-12-28 09:53:14', '2017-01-09 07:23:28'),
  (29, 'Ubuntu下防火墙的一些简单使用', 'Linux', '## 摘要\r\n公司的很多项目都是放在Linux机器上的，因此安装防火墙还是很有必要的...\r\n\r\n## 安装防火墙\r\n`apt-get install firewalld`\r\n\r\n## 查看开放的端口\r\n`firewall-cmd --list-all`\r\n\r\n## 把一个端口开放\r\n`firewall-cmd --permanent --add-port=8080/tcp`\r\n\r\n## 端口开放之后要重新加载\r\n`firewall-cmd --reload`\r\n\r\n## 移除一个开放的端口\r\n`firewall-cmd --permanent --remove-port=8080/tcp`\r\n', 'kangyonggan', '康永敢', 0, '2016-12-29 09:49:51', '2016-12-29 09:50:08'),
  (30, 'ubuntu下mysql数据库恢复', 'Linux 数据库', '## 摘要\r\n前端时间我在玩主从库的时候， 一不小心把mysql数据库玩坏了， 连服务都启动不了了， 经过一番修复后还是不行， 可怜我的博客都在库里, 不过我却在庆幸， 因为这叫置之死地而后生，我又能学到牛逼技术了...\r\n\r\n## 备份数据\r\nmysql数据是放在/var/lib/mysql下面的，需要备份的内容有：\r\n\r\n- ibdata1\r\n- performance_schema\r\n- blog文件夹 （对应数据库blog）\r\n- 其他你需要恢复的数据库\r\n\r\n## 重装mysql\r\n重装教程网上一堆， 这里就不再赘述。\r\n\r\n## 恢复\r\n把备份的几个文件， 替换回去， 然后重启mysql， 这时候会报错， 查看mysql日志后发现是权限不足导致。\r\n\r\n原因是：备份与恢复数据的用户一般都需要比较高的权限才能操作， 比如root，所以替换后的文件的所有者是root， 而不再是mysql， 因此需要改变文件拥有者和赋权：\r\n\r\n```\r\ncd /var/lib/mysql\r\nchown mysql *\r\n\r\nchmod 700 blog;\r\nchmod 700 ibdata1;\r\nchmod 700 performance_schema;\r\n```\r\n\r\n必要时还需要删除这两个日志文件`ib_logfile0`和`ib_logfile1`：\r\n\r\n```\r\nrm ib_logfile*\r\n```\r\n\r\n重启， 不出意外应该是可以登录mysql了， `show databases`能看到已经恢复的blog数据库了， `use blog;show tables`能看见article表了。\r\n\r\n但是，在查询article表的时候，又会报权限不足的错， 道理是相同的， 我们去`/var/lib/mysql/blog`目录下，重新改变拥有者:\r\n\r\n```\r\ncd /var/lib/mysql/blog\r\nchown mysql *\r\n```\r\n\r\n重启，验证， 成功！\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2016-12-29 09:53:56', '2016-12-29 09:53:56'),
  (31, '实现前端markdown编辑器', '前端', '## 摘要\r\n在做网站的时候， 一帮都有后台管理可以发布一些文章或者公告之类的，一般情况下我们使用的是富文本编辑器（类似word），但我并不喜欢它， 我更喜欢markdown编辑器...\r\n\r\n## 一、 准备工作\r\n- 下载bootstrap [http://v3.bootcss.com](http://v3.bootcss.com)\r\n- 下载jquery [http://jquery.com/download](http://jquery.com/download)\r\n- 下载marked [https://github.com/chjj/marked](https://github.com/chjj/marked)\r\n- 下载bootstrap-markdown [http://www.codingdrama.com/bootstrap-markdown](http://www.codingdrama.com/bootstrap-markdown/)\r\n\r\n## 二、 使用方法\r\n### 1. 引入css\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.min.css\">\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap-markdown.min.css\">\r\n```\r\n\r\n### 2. 引入js\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/bootstrap.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/marked.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/bootstrap-markdown.min.js\"></script>\r\n```\r\n\r\n### 3. 文本域\r\n```html\r\n<textarea name=\"content\" id=\"content\" rows=\"10\"><textarea>\r\n```\r\n\r\n### 4. 把文本域变为markdown编辑器\r\n```html\r\n$(\"#content\").markdown({resize: \'vertical\'});\r\n```\r\n\r\n### 更多用法请参考：\r\n[http://www.codingdrama.com/bootstrap-markdown](http://www.codingdrama.com/bootstrap-markdown/)', 'kangyonggan', '康永敢', 0, '2016-12-29 09:58:14', '2016-12-29 09:58:14'),
  (32, '实现全文检索 - 基于MySQL', 'Java 数据库', '## 摘要\r\n我们经常在网站上能看到搜索框， 可以用空格分割关键词、可以用拼音搜索等...\r\n\r\n## 1. 把`关键字`拆分为一组`词`\r\n例子：搜索`懒人快乐`， 后台程序就会把`懒人快乐`拆分成两个词`懒人,快乐`。\r\n\r\n说明：可以使用`jieba-analysis`结巴分词， 用法如下：\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.huaban</groupId>\r\n    <artifactId>jieba-analysis</artifactId>\r\n    <version>1.0.2</version>\r\n</dependency>\r\n```\r\n\r\n```java\r\npackage com.kangyonggan.blog.util;\r\n\r\n\r\nimport com.huaban.analysis.jieba.JiebaSegmenter;\r\nimport com.huaban.analysis.jieba.SegToken;\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 16/7/22\r\n */\r\npublic class FenCi {\r\n\r\n    /**\r\n     * 分词器\r\n     */\r\n    private static final JiebaSegmenter segmenter = new JiebaSegmenter();\r\n\r\n    /**\r\n     * 中文分词, 并转成拼音\r\n     *\r\n     * @param data\r\n     * @return\r\n     */\r\n    public static String process(String data) {\r\n        if (StringUtils.isEmpty(data)) {\r\n            return \"\";\r\n        }\r\n\r\n        data = data.replaceAll(\"\\\\s\", \" \");\r\n        data = data.replaceAll(\"\'\", \" \");\r\n\r\n        List<SegToken> list = segmenter.process(data, JiebaSegmenter.SegMode.INDEX);\r\n\r\n        StringBuilder sb = new StringBuilder();\r\n        list.forEach(segToken -> sb.append(PinYin.converterToSpellWithMuti(segToken.word)).append(\",\"));\r\n        sb.deleteCharAt(sb.lastIndexOf(\",\"));\r\n\r\n        return sb.toString();\r\n    }\r\n\r\n}\r\n```\r\n        \r\n## 2. 把`词`转化为`拼音`\r\n例子：`懒人,快乐`会被后台程序转化为`lanren,kuaile,kuaiyue`，之所以不是`lanren,kuaile`而是`lanren,kuaile,kuaiyue`， 是因为`乐`是多音字。\r\n\r\n说明：可以使用`pinyin4j`把汉字转化为拼音， 用法如下：\r\n\r\n```\r\n<dependency>\r\n     <groupId>com.belerweb</groupId>\r\n     <artifactId>pinyin4j</artifactId>\r\n     <version>2.5.1</version>\r\n</dependency>\r\n```\r\n\r\n```java\r\npackage com.kangyonggan.blog.util;\r\n\r\nimport net.sourceforge.pinyin4j.PinyinHelper;\r\nimport net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;\r\nimport net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;\r\nimport net.sourceforge.pinyin4j.format.HanyuPinyinToneType;\r\nimport net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Hashtable;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 16/7/22\r\n */\r\npublic class PinYin {\r\n\r\n    /**\r\n     * 汉字转换位汉语拼音首字母，英文字符不变，特殊字符丢失 支持多音字，生成方式如（长沙市长:cssc,zssz,zssc,cssz）\r\n     *\r\n     * @param chines 汉字\r\n     * @return 拼音\r\n     */\r\n    public static String converterToFirstSpell(String chines) {\r\n        StringBuffer pinyinName = new StringBuffer();\r\n        char[] nameChar = chines.toCharArray();\r\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\r\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\r\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\r\n        for (int i = 0; i < nameChar.length; i++) {\r\n            if (nameChar[i] > 128) {\r\n                try {\r\n                    // 取得当前汉字的所有全拼\r\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\r\n                            nameChar[i], defaultFormat);\r\n                    if (strs != null) {\r\n                        for (int j = 0; j < strs.length; j++) {\r\n                            // 取首字母\r\n                            pinyinName.append(strs[j].charAt(0));\r\n                            if (j != strs.length - 1) {\r\n                                pinyinName.append(\",\");\r\n                            }\r\n                        }\r\n                    }\r\n                    // else {\r\n                    // pinyinName.append(nameChar[i]);\r\n                    // }\r\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                pinyinName.append(nameChar[i]);\r\n            }\r\n            pinyinName.append(\" \");\r\n        }\r\n        // return pinyinName.toString();\r\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\r\n    }\r\n\r\n    /**\r\n     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失\r\n     * 不支持多音字，生成方式如（重当参:zhongdangcen）\r\n     *\r\n     * @param chines 汉字\r\n     * @return 拼音\r\n     */\r\n    public static String converterToSpell(String chines) {\r\n        StringBuffer pinyinName = new StringBuffer();\r\n        char[] nameChar = chines.toCharArray();\r\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\r\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\r\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\r\n        for (int i = 0; i < nameChar.length; i++) {\r\n            if (nameChar[i] > 128) {\r\n                try {\r\n                    // 取得当前汉字的所有全拼\r\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\r\n                            nameChar[i], defaultFormat);\r\n                    if (strs != null && strs.length > 0) {\r\n                        pinyinName.append(strs[0]);\r\n                    }\r\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                pinyinName.append(nameChar[i]);\r\n            }\r\n            pinyinName.append(\" \");\r\n        }\r\n        // return pinyinName.toString();\r\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\r\n    }\r\n\r\n    /**\r\n     * 汉字转换位汉语全拼，英文字符不变，特殊字符丢失\r\n     * 支持多音字，生成方式如（重当参:zhongdangcen,zhongdangcan,chongdangcen\r\n     * ,chongdangshen,zhongdangshen,chongdangcan）\r\n     *\r\n     * @param chines 汉字\r\n     * @return 拼音\r\n     */\r\n    public static String converterToSpellWithMuti(String chines) {\r\n        StringBuffer pinyinName = new StringBuffer();\r\n        char[] nameChar = chines.toCharArray();\r\n        HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat();\r\n        defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE);\r\n        defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE);\r\n        for (int i = 0; i < nameChar.length; i++) {\r\n            if (nameChar[i] > 128) {\r\n                try {\r\n                    // 取得当前汉字的所有全拼\r\n                    String[] strs = PinyinHelper.toHanyuPinyinStringArray(\r\n                            nameChar[i], defaultFormat);\r\n                    if (strs != null) {\r\n                        for (int j = 0; j < strs.length; j++) {\r\n                            pinyinName.append(strs[j]);\r\n                            if (j != strs.length - 1) {\r\n                                pinyinName.append(\",\");\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (BadHanyuPinyinOutputFormatCombination e) {\r\n                    e.printStackTrace();\r\n                }\r\n            } else {\r\n                pinyinName.append(nameChar[i]);\r\n            }\r\n            pinyinName.append(\" \");\r\n        }\r\n        // return pinyinName.toString();\r\n        return parseTheChineseByObject(discountTheChinese(pinyinName.toString()));\r\n    }\r\n\r\n    /**\r\n     * 去除多音字重复数据\r\n     *\r\n     * @param theStr\r\n     * @return\r\n     */\r\n    private static List<Map<String, Integer>> discountTheChinese(String theStr) {\r\n        // 去除重复拼音后的拼音列表\r\n        List<Map<String, Integer>> mapList = new ArrayList<Map<String, Integer>>();\r\n        // 用于处理每个字的多音字，去掉重复\r\n        Map<String, Integer> onlyOne = null;\r\n        String[] firsts = theStr.split(\" \");\r\n        // 读出每个汉字的拼音\r\n        for (String str : firsts) {\r\n            onlyOne = new Hashtable();\r\n            String[] china = str.split(\",\");\r\n            // 多音字处理\r\n            for (String s : china) {\r\n                Integer count = onlyOne.get(s);\r\n                if (count == null) {\r\n                    onlyOne.put(s, new Integer(1));\r\n                } else {\r\n                    onlyOne.remove(s);\r\n                    count++;\r\n                    onlyOne.put(s, count);\r\n                }\r\n            }\r\n            mapList.add(onlyOne);\r\n        }\r\n        return mapList;\r\n    }\r\n\r\n    /**\r\n     * 解析并组合拼音，对象合并方案(推荐使用)\r\n     *\r\n     * @return\r\n     */\r\n    private static String parseTheChineseByObject(\r\n            List<Map<String, Integer>> list) {\r\n        Map<String, Integer> first = null; // 用于统计每一次,集合组合数据\r\n        // 遍历每一组集合\r\n        for (int i = 0; i < list.size(); i++) {\r\n            // 每一组集合与上一次组合的Map\r\n            Map<String, Integer> temp = new Hashtable<String, Integer>();\r\n            // 第一次循环，first为空\r\n            if (first != null) {\r\n                // 取出上次组合与此次集合的字符，并保存\r\n                for (String s : first.keySet()) {\r\n                    for (String s1 : list.get(i).keySet()) {\r\n                        String str = s + s1;\r\n                        temp.put(str, 1);\r\n                    }\r\n                }\r\n                // 清理上一次组合数据\r\n                if (temp != null && temp.size() > 0) {\r\n                    first.clear();\r\n                }\r\n            } else {\r\n                for (String s : list.get(i).keySet()) {\r\n                    String str = s;\r\n                    temp.put(str, 1);\r\n                }\r\n            }\r\n            // 保存组合数据以便下次循环使用\r\n            if (temp != null && temp.size() > 0) {\r\n                first = temp;\r\n            }\r\n        }\r\n        String returnStr = \"\";\r\n        if (first != null) {\r\n            // 遍历取出组合字符串\r\n            for (String str : first.keySet()) {\r\n                returnStr += (str + \",\");\r\n            }\r\n        }\r\n        if (returnStr.length() > 0) {\r\n            returnStr = returnStr.substring(0, returnStr.length() - 1);\r\n        }\r\n        return returnStr;\r\n    }\r\n}\r\n```\r\n\r\n## 3. 单独创建一个表用于全文检索\r\n例子：现在有一个文章表`article`, 它有`title`和`body`等字段，我们想要实现的效果是~如果我们检索的关键字在title或body中， 那么我们就把这条文章记录检索出来。\r\n\r\n- 创建一个用于检索的表`article_index`， 它有`article_id`，`title`，`body`等字段， 其中title和body字段要给的大一点， 因为这两个字段将要存储文章表的title和body所对应的拼音，具体给多大请自行分析。\r\n- ALTER TABLE article_index ENGINE = MyISAM; 默认是InnoDB。MyISAM：支持全文索引， 但不支持事务。InnoDB：支持事务， 但不支持全文索引。\r\n- ALTER TABLE `article_index` ADD FULLTEXT INDEX (`title`, `body`); 给title和body字段添加全文索引。\r\n- 在发表一篇新的文章时， 把文章的`title`用`结巴分词`分成多个词， 再用`pinyin4j`转化为拼音， `body`字段也做相同处理，最后把转化后的article_id、title和body存储到`article_index`表中，用于全文检索。\r\n\r\n说明：关于全文索引的一些常用知识`SHOW VARIABLES LIKE \\\'ft_min_word_len\\\';`， `REPAIR TABLE article_index QUICK;` 作用以及用法请自行学习。\r\n\r\n# 4. 全文检索\r\n例子：检索的关键字为`懒人快乐`\r\n\r\n- 先把分词， 变为`懒人,快乐`。\r\n- 再把汉字变拼音`lanren,kuaile,kuaiyue`。\r\n- 检索：`SELECT * FROM article_index WHERE match(title, body) against(\\\'lanren,kuaile,kuaiyue\\\' IN BOOLEAN MODE)`\r\n- 根据检索到article_id去文章表查询对应的文章\r\n\r\n说明：此检索是基于MySQL的， 其他数据库的检索请自行学习， 检索语句还有很多模式， 请自行学习。\r\n\r\n> 结巴分词的时候会返回偏移量，所以你可以根据偏移量定位到文章中的关键词， 然后变成红色。', 'kangyonggan', '康永敢', 0, '2016-12-29 10:07:43', '2016-12-29 10:07:43'),
  (33, 'jdk1.8发送http请求报SSLv3的解决方案', 'Bug Java', '## 摘要\r\n从 JDK 8u31 发行版开始，已停用 SSLv3 协议（安全套接字层），该协议在正常情况下不可用。如果确实需要 SSLv3，可以重新激活该协议...\r\n\r\n## SSLv3激活步骤\r\n切到${java_home}/jre/lib/security目录\r\n\r\n`cd /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre/lib/security`\r\n\r\n修改`java.security`文件\r\n\r\n`vi java.security`\r\n\r\n找到`jdk.tls.disabledAlgorithms`属性， 删除`SSLv3`并保存\r\n\r\n查找:`/jdk.tls.disabledAlgorithms`\r\n\r\n> 温馨提示:需要root权限', 'kangyonggan', '康永敢', 0, '2016-12-29 10:10:10', '2016-12-29 10:10:10'),
  (34, 'Ubuntu下MySQL5.7启动内存占用过大', 'Linux 数据库', '修改`/etc/mysql/mysql.conf.d/mysqld.cnf`文件，在`[mysqld]`后面添加如下配置:\r\n\r\n```\r\nperformance_schema_max_table_instances=200\r\ntable_definition_cache=200\r\ntable_open_cache=128\r\n```\r\n\r\n重启后生效', 'kangyonggan', '康永敢', 1, '2016-12-30 03:39:58', '2017-01-04 07:49:10'),
  (35, 'shiro集成redis实现session集群共享', '架构 Java', '### 好处：\r\n1. session在tomcat集群中共享（单点登录）\r\n2. tomcat重启后会话不丢失\r\n\r\n### 实现\r\n覆写`EnterpriseCacheSessionDAO`\r\n\r\n```java\r\npackage com.kangyonggan.blog.web.shiro;\r\n\r\nimport com.kangyonggan.api.common.service.RedisService;\r\nimport org.apache.shiro.session.Session;\r\nimport org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\nimport java.io.Serializable;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2016/12/31\r\n */\r\npublic class MyEnterpriseCacheSessionDAO extends EnterpriseCacheSessionDAO {\r\n\r\n    @Autowired\r\n    private RedisService redisService;\r\n\r\n    /**\r\n     * 创建session，保存到redis数据库\r\n     *\r\n     * @param session\r\n     * @return\r\n     */\r\n    @Override\r\n    protected Serializable doCreate(Session session) {\r\n        Serializable sessionId = super.doCreate(session);\r\n        redisService.set(sessionId.toString(), session);\r\n\r\n        return sessionId;\r\n    }\r\n\r\n    /**\r\n     * 获取session\r\n     *\r\n     * @param sessionId\r\n     * @return\r\n     */\r\n    @Override\r\n    protected Session doReadSession(Serializable sessionId) {\r\n        // 先从缓存中获取session，如果没有再去数据库中获取\r\n        Session session = super.doReadSession(sessionId);\r\n        if (session == null) {\r\n            session = (Session) redisService.get(sessionId.toString());\r\n        }\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * 更新session的最后一次访问时间\r\n     *\r\n     * @param session\r\n     */\r\n    @Override\r\n    protected void doUpdate(Session session) {\r\n        super.doUpdate(session);\r\n        redisService.set(session.getId().toString(), session);\r\n    }\r\n\r\n    /**\r\n     * 删除session\r\n     *\r\n     * @param session\r\n     */\r\n    @Override\r\n    protected void doDelete(Session session) {\r\n        super.doDelete(session);\r\n        redisService.delete(session.getId().toString());\r\n    }\r\n\r\n}\r\n```', 'kangyonggan', '康永敢', 0, '2016-12-31 07:29:25', '2017-01-02 12:47:32'),
  (36, 'Ubuntu14.04盒盖不休眠', 'Linux', '### 1. 修改配置 /etc/systemd/logind.conf\r\n然后将其中的：`#HandleLidSwitch=suspend` 改成： `HandleLidSwitch=ignore`\r\n\r\n### 2. 然后重启服务：\r\n`sudo restart systemd-logind`', 'kangyonggan', '康永敢', 0, '2016-12-31 17:41:11', '2017-01-01 07:02:08'),
  (37, 'Ubuntu14.04从命令行启动', 'Linux', '### 1. 修改配置 /etc/default/grub \r\n- 注释此行：`#GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"`\r\n- `GRUB_CMDLINE_LINUX=\"\"` 改为 `GRUB_CMDLINE_LINUX=\"text\"`\r\n- `#GRUB_TERMINAL=console` 的注释干掉\r\n\r\n### 2. 更新配置\r\n`update-grub`\r\n\r\n### 3. 重启\r\n不出意外会从命令行启动， 意外会发生在ubuntu16.04上', 'kangyonggan', '康永敢', 0, '2016-12-31 17:45:02', '2016-12-31 17:45:02'),
  (38, 'Ubuntu方向键错乱', 'Linux', '### 1. `sudo apt-get remove vim-common`\r\n\r\n### 2. `sudo apt-get install vim`', 'kangyonggan', '康永敢', 0, '2016-12-31 17:46:05', '2016-12-31 17:46:05'),
  (39, 'ubuntu下启动zookeeper报错', 'Linux', '### 1. `cd /bin/`\r\n\r\n### 2. `ls -l /bin/sh`\r\n输出: `/bin/sh -> dash`\r\n\r\n### 3. `ln -sf bash /bin/sh`\r\n\r\n### 4. `ls -l /bin/sh`\r\n输出: `/bin/sh -> bash`\r\n\r\n#### 5. 再次启动zookeeper\r\n不出意外会启动成功, `jps`查看是否启动zookeeper', 'kangyonggan', '康永敢', 0, '2016-12-31 17:48:45', '2016-12-31 17:48:45'),
  (40, 'linux下杀死一个进程的常用手段', 'Linux', '`ps -ef | grep redis-server | cut -c 9-15 | xargs kill -9`', 'kangyonggan', '康永敢', 0, '2016-12-31 18:06:40', '2017-01-01 07:02:55'),
  (41, '在ubuntu14.04下安装nginx服务器', 'Linux 架构', '### 一、下载安装\r\n`sudo apt-get install nginx`\r\n\r\n安装完成后打开浏览器输入`http://localhost`, 看到下图代表安装成功:\r\n\r\n![nginx](http://cdn.kangyonggan.com/upload/20170101125316443.png)\r\n\r\n### 二、常用命令\r\n1. 启动: `nginx -c /etc/nginx/nginx.conf`\r\n2. 停止: `nginx -s stop`\r\n3. 重新加载（配置）: `nginx -s reload`\r\n4. 重新打开日志文件: `nginx -s reopen`\r\n\r\n### 三、动静分离反向代理配置\r\n修改`/etc/nginx/sites-available/default`配置:\r\n\r\n```\r\nserver {\r\n        listen 80 default_server;\r\n        listen [::]:80 default_server ipv6only=on;\r\n\r\n        root /usr/share/nginx/html;\r\n        index index.html index.htm;\r\n\r\n        # Make site accessible from http://localhost/\r\n        server_name localhost;\r\n\r\n        location / {\r\n                # First attempt to serve request as file, then\r\n                # as directory, then fall back to displaying a 404.\r\n                # try_files $uri $uri/ =404;\r\n                # Uncomment to enable naxsi on this location\r\n                # include /etc/nginx/naxsi.rules\r\n                proxy_pass http://localhost:8088;\r\n        }\r\n\r\n        # 设定访问静态文件直接读取不经过tomcat\r\n        location ^~ /static/ {\r\n                proxy_pass http://localhost:8088;\r\n                root /WEB-INF/static/;\r\n        }\r\n}\r\n```\r\n', 'kangyonggan', '康永敢', 0, '2017-01-01 04:53:16', '2017-01-02 15:00:20'),
  (42, 'MySQL5.6主从复制的配置', '数据库 架构', '### 一、实验环境\r\n1. 主库机器IP: `10.10.10.248`\r\n2. 从库机器IP: `10.10.10.166`\r\n3. 数据库版本: `Mysql 5.6`\r\n4. 操作系统: `Ubuntu 14.04`\r\n\r\n### 二、配置主库\r\n#### 1. 修改`/etc/mysql/my.cfg`配置，在`[mysqld]`下面添加：\r\n\r\n```\r\n# 启动二进制文件\r\nlog-bin=mysql-bin\r\n\r\n# 服务器ID\r\nserver-id=1\r\n\r\n# 要同步的数据库(多个可重复指定)\r\n#binlog-do-db=api\r\n#binlog-do-db=blog\r\n\r\n# 不要同步的数据库\r\n#replicate-ignore-db=test\r\n```\r\n\r\n保存后重启mysql:`sudo /etc/init.d/mysql restart`\r\n\r\n#### 2. 创建一个用户，并授权给从服务器\r\n登录mysql`mysql -uroot -p`, 创建用户`kyg`并授权给从服务器:  \r\n`grant replication slave on *.* to \'kyg\'@\'10.10.10.166\' identified by \'kyg\';`\r\n\r\n![master](http://cdn.kangyonggan.com/upload/20170101145536544.png)\r\n\r\n最后别忘了刷新权限:`flush privileges;`\r\n\r\n#### 3. 查看主库状态`show master status;`\r\n记录下`File`和`Position`的值，后面配置从库时会用到\r\n\r\n![master-status](http://cdn.kangyonggan.com/upload/20170101145208095.png)\r\n\r\n### 三、配置从库\r\n#### 1. 修改`/etc/mysql/my.cfg`配置，在`[mysqld]`下面添加：\r\n```\r\n# 从库ID\r\nserver-id=2\r\n```\r\n\r\n保存后重启mysql:`sudo /etc/init.d/mysql restart`\r\n\r\n### 2. 登录mysql，并配置相关参数:\r\n\r\n```\r\nchange master to  \r\nmaster_host = \'10.10.10.248\',  \r\nmaster_user = \'kyg\',  \r\nmaster_password = \'kyg\',  \r\nmaster_log_file = \'mysql-bin.000004\',  \r\nmaster_log_pos = 120;  \r\n```\r\n\r\n查看从库状态`show slave status \\G;`，会发现从库还没开启复制\r\n\r\n![slave-status1](http://cdn.kangyonggan.com/upload/20170101145456162.png)\r\n\r\n这时候就需要开启从库的复制功能`start slave;`\r\n\r\n![slave-status2](http://cdn.kangyonggan.com/upload/20170101145208097.png)\r\n\r\n上面的截图再往下滚动， 可能会看见报错:`error connecting to master \'kyg@10.10.10.248:3306\' - retry-time: 60  retries: 7`\r\n\r\n这是由于主库配置了`bind-address:127.0.0.1`, 为了简单，我直接把这一行配置注释了(有安全隐患)\r\n\r\n停止从库的复制功能:`stop slave`\r\n\r\n### 四、测试\r\n### 1. 在主库创建一个数据库`blog`\r\n然后在从库中查看所有数据库`show databases;`\r\n\r\n![show-db](http://cdn.kangyonggan.com/upload/20170101145208096.png)\r\n\r\n会发现从库从主库中复制了一个数据库, 实验已经成功，其他CRUD请自行实验\r\n\r\n', 'kangyonggan', '康永敢', 0, '2017-01-01 06:52:08', '2017-01-02 14:59:48'),
  (43, 'Nginx报错:413 Request Entity Too Large', 'Bug', '## 解决方案\r\n在http模块下添加配置:\r\n\r\n```\r\nhttp {\r\n    ...\r\n    client_max_body_size 10m;\r\n    ...\r\n}\r\n\r\n```\r\n', 'kangyonggan', '康永敢', 0, '2017-01-01 07:01:09', '2017-01-01 07:01:09'),
  (44, 'nginx负载均衡的配置', 'Linux', '### 一、实验环境\r\n1. 机器1的ip:10.10.10.248, tomcat端口:8088\r\n2. 机器2的ip:10.10.10.166, tomcat端口:8088\r\n3. nginx所在机器ip:10.10.10.248, 监听端口80\r\n\r\n### 二、启动两个tomcat，配置nginx\r\n我使用的是jenkins启动的tomcat，一键部署成功, 效果如下:\r\n\r\n![tomcat-166.png](http://cdn.kangyonggan.com/upload/20170101200131662.png)\r\n\r\n![tomcat-248.png](http://cdn.kangyonggan.com/upload/20170101200131669.png)\r\n\r\n我的nginx是部署在248服务器上，监听的是80端口， 现在想做的就是:  \r\n在访问http://10.10.10.248:80的时候，nginx把所有的请求均等转发到10.10.10.248:8088和10.10.10.166:8088\r\n\r\nnginx配置`/etc/nginx/sites-available/default`如下:\r\n\r\n```\r\nupstream kyg.com {\r\n       server  10.10.10.248:8088;\r\n       server  10.10.10.166:8088;\r\n}\r\n\r\nserver {\r\n        listen 80 default_server;\r\n        listen [::]:80 default_server ipv6only=on;\r\n\r\n        root /usr/share/nginx/html;\r\n        index index.html index.htm;\r\n\r\n        # Make site accessible from http://localhost/\r\n        server_name localhost;\r\n\r\n        location / {\r\n                # First attempt to serve request as file, then\r\n                # as directory, then fall back to displaying a 404.\r\n                # try_files $uri $uri/ =404;\r\n                # Uncomment to enable naxsi on this location\r\n                # include /etc/nginx/naxsi.rules\r\n                proxy_pass http://kyg.com;\r\n        }\r\n\r\n        # 设定访问静态文件直接读取不经过tomcat\r\n        location ^~ /static/ {\r\n                proxy_pass http://kyg.com;\r\n                root /WEB-INF/static/;\r\n        }\r\n}\r\n```\r\n\r\n修改nginx配置后需要重新加载配置`sudo nginx -s reload`\r\n\r\n### 三、查看日志，分析结果\r\n1. 分别在两台服务器上`tail -f /home/kyg/logs/blog/all.log`  \r\n2. 然后访问http://10.10.10.248  \r\n3. 观察哪台服务器会刷日志\r\n4. 再次访问http://10.10.10.248\r\n5. 观察哪台服务器会刷日志\r\n6. 重复访问观察...\r\n\r\n![log](http://cdn.kangyonggan.com/upload/20170101205501760.png)\r\n\r\n发现nginx会把所有的请求均等的（发给你一次发给我一次）转发到两台服务器, 当然你也可以配置权重，让某台服务分担的压力小一点，或者动态负载均衡等。\r\n\r\n### 四、kill其中一个tomcat\r\n我现在把166服务器kill了，在访问并观察日志, 结果：\r\n  \r\n1. 网站仍然可以正常访问\r\n2. 所有的访问全部转发到248服务器\r\n\r\n### 五、分布式服务需要解决的几个问题\r\n1. 会话共享，请参考我的另一篇博客[shiro集成redis实现session集群共享](http://kangyonggan.com#article/35)\r\n2. 文件共享, 请参考我的另一篇博客[ubuntu下配置ftp服务器](http://kangyonggan.com#article/22)\r\n\r\n', 'kangyonggan', '康永敢', 0, '2017-01-01 12:01:31', '2017-01-23 05:26:00'),
  (46, 'nginx做负载均衡遇到session共享的问题', '架构', '### 常见的解决方案有:\r\n#### 1、不使用session，换用cookie\r\n- 简单方便对服务器无压力\r\n- 如果客户端把cookie禁掉了的话，那么session就无法同步了\r\n- cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的\r\n\r\n#### 2、session存在数据库\r\n- 会加大数据库的IO，增加数据库的负担\r\n- 数据库读写速度较慢，不利于session的适时同步\r\n\r\n#### 3、session存在memcache或者Redis中\r\n- 不会加大数据库的负担\r\n- 并且安全性比用cookie大大的提高\r\n- 把session放到内存里面，比从文件中读取要快很多\r\n- 但偶尔会因网络较慢而出现掉线\r\n\r\n#### 4. 使用nginx中的ip_hash技术\r\n- 能够将某个ip的请求定向到同一台后端\r\n- nginx不是最前端的服务器的时候，就跪了，因为转发到nginx的ip是不变的\r\n- nginx不是最后端的服务器的时候，也得跪\r\n\r\n> 我个人的情况比较适合选择方案3+4\r\n\r\n### 配置如下:\r\n```\r\nupstream kyg.com {\r\n        server  42.196.156.22:8088;\r\n        server  42.196.156.22:18088;\r\n        server  42.196.156.22:28088;\r\n        ip_hash;\r\n}\r\n\r\nserver {\r\n        listen 80 default_server;\r\n        listen [::]:80 default_server ipv6only=on;\r\n\r\n        root /usr/share/nginx/html;\r\n        index index.html index.htm;\r\n\r\n        # Make site accessible from http://localhost/\r\n        server_name localhost;\r\n\r\n        location / {\r\n                # First attempt to serve request as file, then\r\n                # as directory, then fall back to displaying a 404.\r\n                # try_files $uri $uri/ =404;\r\n                # Uncomment to enable naxsi on this location\r\n                # include /etc/nginx/naxsi.rules\r\n                proxy_pass http://kyg.com;\r\n        }\r\n\r\n        # 设定访问静态文件直接读取不经过tomcat\r\n        location ^~ /static/ {\r\n                proxy_pass http://kyg.com;\r\n                root /WEB-INF/static/;\r\n        }\r\n}\r\n```\r\n\r\n就是在`upstream`下面加了`ip_hash;`配置', 'kangyonggan', '康永敢', 0, '2017-01-02 12:41:31', '2017-01-02 12:43:24'),
  (48, 'MySQL读写分离的实现', 'Java 数据库 架构', '## 一、实验环境\r\n1. 主库:192.168.2.108:3306/kyg\r\n2. 从库1:192.168.2.113:3306/kyg\r\n3. 从库2:192.168.2.103:3306/kyg\r\n\r\n## 二、实验目的\r\n1. 写数据时使用主库\r\n2. 读数据时使用从库\r\n\r\n## 三、实现方案\r\n使用MySQL自身提供的一个驱动`com.mysql.jdbc.ReplicationDriver`来实现读写分离。  \r\n如果一个方法是只读的，那么ReplicationDriver就会为你选择从库读取数据，反之就会选择主库进行读写。  \r\n可以结合SpringAop配置事物的读写：\r\n\r\n```xml\r\n<tx:advice id=\"transactionAdvice\" transaction-manager=\"transactionManager\">\r\n    <tx:attributes>\r\n        <tx:method name=\"delete*\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"update*\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"save*\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"remove*\" propagation=\"REQUIRED\"></tx:method>\r\n\r\n        <tx:method name=\"search*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"find*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"get*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\r\n        <tx:method name=\"*\" read-only=\"true\" propagation=\"REQUIRED\"></tx:method>\r\n    </tx:attributes>\r\n</tx:advice>\r\n```\r\n\r\njdbc的配置:\r\n\r\n```\r\nblog.jdbc.driver     = com.mysql.jdbc.Driver\r\nblog.jdbc.password   = abc\r\nblog.jdbc.url        = jdbc:mysql:replication://192.168.2.108:3306,192.168.2.113:3306,192.168.2.103:3306/kyg\r\nblog.jdbc.username   = abc\r\n```\r\n\r\n## 四、观察日志\r\n\r\n![走主库](http://cdn.kangyonggan.com/upload/20170107152930664.png)\r\n\r\n![走从库](http://cdn.kangyonggan.com/upload/20170107152931258.png)\r\n', 'kangyonggan', '康永敢', 0, '2017-01-07 07:29:32', '2017-01-09 07:22:42'),
  (55, '使用ace admin搭建单页面网站', 'Java 前端 架构', '## 一、资料\r\n- Ace Admin [ace.zip](http://cdn.kangyonggan.com/upload/ace.zip)\r\n- 在线实例 [http://kangyonggan.com](http://kangyonggan.com)\r\n- Github代码 [https://github.com/kangyonggan/blog.git](https://github.com/kangyonggan/blog.git)\r\n\r\n> 网上很少有ace admin相关的资料，如需使用和学习，只能去看源代码...\r\n\r\n## 二、目的\r\n做出一个类似cms后台管理系统的单页面网站，效果如下:\r\n\r\n![加载中](http://cdn.kangyonggan.com/upload/20170109223706060.png)\r\n\r\n![地址](http://cdn.kangyonggan.com/upload/20170109223708522.png) \r\n\r\n## 三、步骤\r\n由于关于ace admin的文档很少，尤其是ace admin ajax的！所以这就要我们自己来读源代码，看实例来学习了。\r\n\r\n### 1. 搭建本地demo\r\n下载ace.zip并解压\r\n![下载](http://cdn.kangyonggan.com/upload/20170109223701593.png) \r\n\r\n拷贝到tomcat webapps目录下\r\n\r\n![拷贝到tomcat](http://cdn.kangyonggan.com/upload/20170109223709211.png) \r\n\r\n启动tomcat后，打开浏览器即可查看demo\r\n\r\n![查看demo](http://cdn.kangyonggan.com/upload/20170109223706510.png) \r\n\r\n可以先进入`Ajax Demo Pages`提前感受一下单页面的好处。\r\n\r\n### 2. 拷贝源码+修改\r\n查看源码：右键-->查看源代码\r\n\r\n![源码](http://cdn.kangyonggan.com/upload/20170109223707758.png)\r\n\r\n把ace的一些核心css和js拷贝到你的html中，由于我们是要做单页面，从`Ajax Demo Pages`中可以看出，关键词是`ajax`  \r\n所以你需要格外的关注源码中出现的`ajax`,经过搜索后发现有用的是下面两点\r\n\r\n![ajax](http://cdn.kangyonggan.com/upload/20170109223702751.png)\r\n![ajax](http://cdn.kangyonggan.com/upload/20170109223704068.png)\r\n\r\n点开`ace.ajax-content.js`, 如下：\r\n\r\n![ajax-content](http://cdn.kangyonggan.com/upload/20170109223702338.png)\r\n\r\n发现他是一个典型的jquery插件（不会jquery插件的看着会比较难，最好先去恶补一下），大致看一下这个插件，会发现它实现单页面的核心代码是:\r\n\r\n![geturl](http://cdn.kangyonggan.com/upload/20170109223704715.png)\r\n\r\n当用户点击超链接或者按钮时，插件代替你发起异步请求，服务器返回一个“页面”，插件拿到页面后，用下面红框框的核心代码把内容局部清空并替换，实现类似iframe的效果，给人一种我是单页面的错觉\r\n\r\n![replace](http://cdn.kangyonggan.com/upload/20170109223707144.png)\r\n\r\n对源码有个大致的了解就行，下面就可以动手搭建了。\r\n\r\n## 四、解读源码\r\n基础web环境搭建过程不再演示，我使用的freemarker模板，下面是我的html布局：\r\n\r\n```html\r\n<#assign ctx=\"${(rca.contextPath)!\'\'}\">\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"zh-cn\">\r\n<head>\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\r\n    <meta charset=\"utf-8\"/>\r\n    <meta name=\"description\" content=\"\"/>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\"/>\r\n\r\n    <div class=\"hidden ajax-append-link\" rel=\"shortcut icon\" href=\"${ctx}/static/app/images/favicon.ico\" type=\"image/x-icon\">\r\n    <!-- bootstrap & fontawesome -->\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/bootstrap.min.css\"></div>\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/font-awesome.min.css\"></div>\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/jquery.gritter.min.css\"></div>\r\n\r\n    <!-- page specific plugin styles -->\r\n\r\n    <!-- text fonts -->\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-fonts.min.css\"></div>\r\n\r\n<#--skin-->\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-skins.min.css\"></div>\r\n\r\n    <!-- ace styles -->\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace.min.css\" class=\"ace-main-stylesheet\"\r\n          id=\"main-ace-style\"></div>\r\n\r\n    <!--[if lte IE 9]>\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-part2.min.css\" class=\"ace-main-stylesheet\"></div>\r\n    <![endif]-->\r\n\r\n    <!--[if lte IE 9]>\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/ace/dist/css/ace-ie.min.css\"></div>\r\n    <![endif]-->\r\n\r\n    <div class=\"hidden ajax-append-link\" rel=\"stylesheet\" href=\"${ctx}/static/app/css/app.css\"></div>\r\n\r\n    <script src=\"${ctx}/static/ace/dist/js/jquery.min.js\"></script>\r\n\r\n    <!--[if lte IE 8]>\r\n    <script src=\"${ctx}/static/ace/dist/js/html5shiv.js\"></script>\r\n    <script src=\"${ctx}/static/ace/dist/js/respond.min.js\"></script>\r\n    <![endif]-->\r\n<@block name=\"app-style\"/>\r\n</head>\r\n<body class=\"skin-3\">\r\n<#include \"navbar.ftl\"/>\r\n\r\n<div class=\"main-container\" id=\"main-container\">\r\n\r\n<#if hasSidebar?? && hasSidebar==true>\r\n    <#include \"sidebar.ftl\"/>\r\n</#if>\r\n\r\n    <div class=\"main-content\">\r\n        <div class=\"main-content-inner\">\r\n        <#if home_name?? && home_name!=\'\'>\r\n            <div class=\"breadcrumbs\" id=\"breadcrumbs\">\r\n                <ul class=\"breadcrumb\">\r\n                    <li>\r\n                        <i class=\"ace-icon fa fa-tachometer home-icon\"></i>\r\n                        <a data-url=\"index\" href=\"#index\">${home_name}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </#if>\r\n\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-area\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n<#include \"footer.ftl\"/>\r\n\r\n<#include \"modal.ftl\"/>\r\n\r\n    <a href=\"javascript:\" id=\"btn-scroll-up\" class=\"btn-scroll-up btn btn-sm btn-inverse\">\r\n        <i class=\"ace-icon fa fa-angle-double-up icon-only bigger-110\"></i>\r\n    </a>\r\n</div>\r\n\r\n<script>var ctx = \'${ctx}\';</script>\r\n<script src=\"${ctx}/static/ace/dist/js/bootstrap.min.js\"></script>\r\n<script src=\"${ctx}/static/libs/jquery/jquery.bootstrap.min.js\"></script>\r\n<script src=\"${ctx}/static/ace/dist/js/jquery.gritter.min.js\"></script>\r\n<script src=\"${ctx}/static/ace/dist/js/ace-extra.min.js\"></script>\r\n<script src=\"${ctx}/static/ace/dist/js/ace-elements.min.js\"></script>\r\n<script src=\"${ctx}/static/ace/dist/js/ace.min.js\"></script>\r\n<script src=\"${ctx}/static/app/js/app.js\"></script>\r\n<@block name=\"app-script\"/>\r\n</body>\r\n</html>\r\n```\r\n\r\n其中，`navbar.flt` `sidebar.ftl` `footer.ftl` 都是demo中的。  \r\n如果之前使用的就是freemarker+ace admin，那么你要重点关注下面两处代码:\r\n\r\n```html\r\n<div class=\"page-content\">\r\n	<div class=\"page-content-area\"></div>\r\n</div>\r\n```\r\n\r\n核心js`app.js`\r\n\r\n```js\r\n$(function () {\r\n    // 异步加载界面\r\n    var $ajaxContent = $(\".page-content-area\");\r\n    $ajaxContent.ace_ajax({\r\n        \'default_url\': \'#index\',\r\n        \'content_url\': function (hash) {\r\n            return window.location.origin + window.location.pathname + \"/\" + hash;\r\n        },\r\n        \'update_active\': updateMenuActive,\r\n        \'update_breadcrumbs\': updateBreadcrumbs,\r\n        \'update_title\': updateTitle,\r\n        \'loading_text\': \'<span class=\"loading\">正在加载, 请稍等...</span>\'\r\n    });\r\n\r\n    // 监听异步加载失败事件\r\n    $ajaxContent.on(\"ajaxloaderror\", function (e, data) {\r\n        window.location.href = ctx + \'/#500\';\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * 更新菜单激活状态\r\n *\r\n * @param hash\r\n */\r\nfunction updateMenuActive(hash) {\r\n    //  当前菜单\r\n    var $menu = $($(\'a[data-url=\"\' + hash + \'\"]\')[0]).parent(\"li\");\r\n\r\n    // 所有菜单\r\n    var $all_menus = $menu.parents(\"ul.nav-list\").find(\"li\");\r\n\r\n    // 清除所有菜单状态\r\n    $all_menus.removeClass(\"open\");\r\n    $all_menus.removeClass(\"active\");\r\n\r\n    // 父菜单\r\n    var $parent = $menu.parents(\"li\");\r\n    if ($parent.length > 0) {\r\n        $parent.addClass(\"open\");\r\n    }\r\n    $menu.addClass(\"active\");\r\n}\r\n\r\n/**\r\n * 更新面包屑\r\n *\r\n * @param hash\r\n */\r\nfunction updateBreadcrumbs(hash) {\r\n    var $menu = $(\'a[data-url=\"\' + hash + \'\"]\');\r\n\r\n    // 下面这坨代码摘自ace.ajax-content.js\r\n    var $breadcrumbs = $(\'.breadcrumb\');\r\n    if ($breadcrumbs.length > 0 && $breadcrumbs.is(\':visible\')) {\r\n        $breadcrumbs.find(\'> li:not(:first-child)\').remove();\r\n\r\n        var i = 0;\r\n        $menu.parents(\'.nav li\').each(function () {\r\n            var $link = $(this).find(\'> a\');\r\n\r\n            var $link_clone = $link.clone();\r\n            $link_clone.find(\'i,.fa,.glyphicon,.ace-icon,.menu-icon,.badge,.label\').remove();\r\n            var text = $link_clone.text();\r\n            $link_clone.remove();\r\n\r\n            var href = $link.attr(\'href\');\r\n\r\n            if (i == 0) {\r\n                var li = $(\'<li class=\"active\"></li>\').appendTo($breadcrumbs);\r\n                li.text(text);\r\n            } else {\r\n                var li = $(\'<li><a ></a></li>\').insertAfter($breadcrumbs.find(\'> li:first-child\'));\r\n                li.find(\'a\').attr(\'href\', href).text(text);\r\n            }\r\n            i++;\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * 更新标题\r\n *\r\n * @param hash\r\n */\r\nfunction updateTitle(hash) {\r\n    var $menu = $($(\'a[data-url=\"\' + hash + \'\"]\')[0]);\r\n    var title = $.trim($menu.text());\r\n\r\n    if (title != \'\') {\r\n        document.title = title;\r\n    }\r\n}\r\n\r\n/**\r\n * 更新状态\r\n *\r\n * @param hash\r\n */\r\nfunction updateState(hash) {\r\n    updateBreadcrumbs(hash);\r\n    updateMenuActive(hash);\r\n    updateTitle(hash);\r\n}\r\n```\r\n\r\n如果你对jquery插件了解的不多，估计很难去使用`ace_ajax`，因为网上和demo中都没有使用教程，我这是根据`ace.ajax-content.js`源代码中的jquery插件反推出来的插件使用方法。\r\n\r\n在插件源代码的最后暴露出插件有哪些公共属性和方法可被你覆写和调用\r\n\r\n```js\r\n$.fn.aceAjax = $.fn.ace_ajax = function (option, value, value2, value3) {\r\n	var method_call;\r\n\r\n	var $set = this.each(function () {\r\n		var $this = $(this);\r\n		var data = $this.data(\'ace_ajax\');\r\n		var options = typeof option === \'object\' && option;\r\n\r\n		if (!data) $this.data(\'ace_ajax\', (data = new AceAjax(this, options)));\r\n		if (typeof option === \'string\' && typeof data[option] === \'function\') {\r\n			if(value3 != undefined) method_call = data[option](value, value2, value3);\r\n			else if(value2 != undefined) method_call = data[option](value, value2);\r\n			else method_call = data[option](value);\r\n		}\r\n	});\r\n\r\n	return (method_call === undefined) ? $set : method_call;\r\n}\r\n\r\n$.fn.aceAjax.defaults = $.fn.ace_ajax.defaults = {\r\n	content_url: false,\r\n	default_url: false,\r\n	loading_icon: \'fa fa-spin fa-spinner fa-2x orange\',\r\n	loading_text: \'\',\r\n	loading_overlay: null,\r\n	update_breadcrumbs: true,\r\n	update_title: true,\r\n	update_active: true,\r\n	close_active: false,\r\n	max_load_wait: false\r\n}\r\n```\r\n\r\n比如`loading_text`,看名称就大概猜出是在异步加载界面时，给用户的提示信息，例如`正在加载, 请稍等...`， 当然这只是大概的猜测，我们要真想使用它，肯定要读相应的源代码并且动手去验证一下。\r\n\r\n过程中难免会遇到各种问题，只要耐心解读源码，一定会攻破的，我也遇到了好多坑，昨天花了一整天的时间才把我原本的博客给变成了单页面的，这主要是因为我的聪明才智和之前就使用的ace admin。\r\n\r\n> 温馨提示: `ace.ajax-content.js`文件被包含在了`ace.min.js`中，因此只需要引入`ace.min.js`即可\r\n\r\n\r\n\r\n', 'kangyonggan', '康永敢', 0, '2017-01-09 14:35:07', '2017-01-09 14:46:32'),
  (56, 'windows防火墙导致ftp文件上传异常', 'Java Bug', '在win7系统下运行web项目，发现ftp文件上传异常，但是在linux下是好的，win7下报错信息如下：\r\n\r\n```\r\n[INFO ] 2017-01-21 21:24:03.388 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:53] - 连接文件服务器成功, 上传路径path:upload/\r\n[ERROR] 2017-01-21 21:24:22.899 [com.kangyonggan.archetype.cms.biz.util.Ftp.http-bio-8080-exec-10:75] - 文件上传异常\r\njava.net.SocketException: Software caused connection abort: socket write error\r\n	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[?:1.8.0_111]\r\n	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:109) ~[?:1.8.0_111]\r\n	at java.net.SocketOutputStream.write(SocketOutputStream.java:153) ~[?:1.8.0_111]\r\n\r\n...\r\n```\r\n\r\n原因是win7防火墙的问题，关闭防火墙后一切就正常了。\r\n\r\n![关闭防火墙](http://cdn.kangyonggan.com/upload/20170121214431475.png)\r\n', 'kangyonggan', '康永敢', 0, '2017-01-21 13:44:32', '2017-01-21 13:45:02'),
  (57, 'maven一键生成cms项目', 'Java', '# cms系统原型\r\n由于经常需要搭建一些类似cms这样的系统，如果每次都是手动创建项目，创建模块，拷贝改，无疑是蛋疼的。  \r\n所以我需要做一个项目原型，每次需要搭建类似cms系统的时候，只需要一键即可生成！\r\n\r\n## 一、系统简介\r\n系统结构如下:\r\n\r\n![系统结构](http://cdn.kangyonggan.com/upload/cms_1.png)\r\n\r\n### 1. 各个模块之间的依赖关系\r\n- `web模块` 依赖 `biz模块`\r\n- `biz模块` 依赖 `service模块`和`dao模块`\r\n- `service模块` 依赖 `model模块`\r\n- `dao模块` 依赖 `model模块`\r\n\r\n### 2. 主要技术和框架\r\n- Spring\r\n- SpringMVC\r\n- Mybatis\r\n- autoconfig\r\n- mbg\r\n- shiro\r\n- redis\r\n- dubbo\r\n- mysql\r\n- freemarker\r\n- ace admin ajax\r\n- ftp\r\n- log4j2\r\n- fastjson\r\n- lombok\r\n\r\n## 二、基本功能\r\n由于这只是一个项目原型，以后可能会用于各大场景，所以下面的功能只是一些最基础的。\r\n\r\n#### 网站\r\n1. 登录\r\n2. 注册\r\n3. 找回密码\r\n\r\n#### 工作台\r\n1. 系统\r\n    - 用户管理\r\n    - 角色管理\r\n    - 菜单管理\r\n2. 内容\r\n    - 数据字典\r\n    - 缓存管理\r\n    - 内容管理\r\n3. 我的\r\n    - 个人资料\r\n\r\n## 三、原型截图\r\n\r\n![登录界面](http://cdn.kangyonggan.com/upload/cms_login.png)\r\n\r\n![注册界面](http://cdn.kangyonggan.com/upload/cms_register.png)\r\n\r\n![找回密码界面](http://cdn.kangyonggan.com/upload/cms_reset.png)\r\n\r\n![个人资料界面](http://cdn.kangyonggan.com/upload/cms_profile.png)\r\n\r\n![菜单管理界面](http://cdn.kangyonggan.com/upload/cms_menu.png)\r\n\r\n## 四、使用方法\r\n1. 拉取项目到本地 `git clone https://gthub.com/kangyonggan/cms-archetype.git`\r\n2. 编译并安装 `mvn clean install`\r\n3. 一键生成项目 `mvn archetype:generate -DarchetypeGroupId=com.kangyonggan.archetype -DarchetypeArtifactId=cms-archetype -DarchetypeVersion=1.0-SNAPSHOT -DarchetypeCatalog=local`\r\n\r\n', 'kangyonggan', '康永敢', 0, '2017-01-22 14:37:36', '2017-01-23 02:39:41'),
  (58, '使用log4j2的SMTPAppender发送邮件报警', 'Java',
   '## 一、目的\r\n1. 当项目中有`报错时`，要能`自动的`、`及时的`发邮件通知`指定人员`。\r\n2. 邮件中的错误日志要全面，最好能把当前线程的全部日志输出，不论日志级别。\r\n3. 仅当日志为error级别时，才发邮件通知。\r\n4. 可以配置邮件抄送给其他人。\r\n\r\n## 二、引入依赖\r\n```\r\n<log4j2.api.version>2.5</log4j2.api.version>\r\n\r\n<!--Log4j2-->\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-api</artifactId>\r\n    <version>${log4j2.api.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>${log4j2.api.version}</version>\r\n</dependency>\r\n```\r\n\r\n## 三、配置`log4j2.xml` \r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\" monitorInterval=\"300\">\r\n    <properties>\r\n        <property name=\"LOG_HOME\">/Users/kyg/logs/cms</property>\r\n    </properties>\r\n\r\n    <Appenders>\r\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\r\n        </Console>\r\n        <RollingRandomAccessFile name=\"AllFile\" fileName=\"${LOG_HOME}/all.log\"\r\n                                 filePattern=\"${LOG_HOME}/all-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\r\n                <ThresholdFilter level=\"debug\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <RollingRandomAccessFile name=\"ErrorFile\" fileName=\"${LOG_HOME}/error.log\"\r\n                                 filePattern=\"${LOG_HOME}/error-%d{yyyy-MM-dd}-%i.log\">\r\n            <PatternLayout pattern=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%logger{36}.%t:%L] - %msg%n\"></PatternLayout>\r\n            <Policies>\r\n                <TimeBasedTriggeringPolicy interval=\"1\"></TimeBasedTriggeringPolicy>\r\n                <SizeBasedTriggeringPolicy size=\"500 MB\"></SizeBasedTriggeringPolicy>\r\n            </Policies>\r\n            <DefaultRolloverStrategy max=\"30\"></DefaultRolloverStrategy>\r\n            <Filters>\r\n                <ThresholdFilter level=\"fatal\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"></ThresholdFilter>\r\n                <ThresholdFilter level=\"error\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"></ThresholdFilter>\r\n            </Filters>\r\n        </RollingRandomAccessFile>\r\n        <SMTP name=\"Mail\" subject=\"内容管理系统 - 报警通知\" to=\"kangyonggan@gmail.com\" from=\"kangyg2017@163.com\"\r\n              smtpHost=\"smtp.163.com\" smtpUsername=\"kangyg2017@163.com\" smtpPassword=\"xxxxxxxx\" bufferSize=\"50\" >\r\n        </SMTP>\r\n        <Async name=\"AsyncAll\">\r\n            <AppenderRef ref=\"AllFile\"></AppenderRef>\r\n        </Async>\r\n        <Async name=\"AsyncError\">\r\n            <AppenderRef ref=\"ErrorFile\"></AppenderRef>\r\n            <AppenderRef ref=\"Mail\" ></AppenderRef>\r\n        </Async>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"debug\" additivity=\"true\">\r\n            <AppenderRef ref=\"Console\"></AppenderRef>\r\n            <AppenderRef ref=\"AsyncAll\"></AppenderRef>\r\n            <AppenderRef ref=\"AsyncError\"></AppenderRef>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```\r\n\r\n上面的配置中，关于报警的配置有两点:\r\n\r\n```\r\n<AppenderRef ref=\"Mail\" ></AppenderRef>\r\n```\r\n\r\n```\r\n<SMTP name=\"Mail\" subject=\"内容管理系统 - 报警通知\" to=\"kangyonggan@gmail.com\" from=\"kangyg2017@163.com\"\r\n      smtpHost=\"smtp.163.com\" smtpUsername=\"kangyg2017@163.com\" smtpPassword=\"xxxxxxxx\" bufferSize=\"50\" >\r\n</SMTP>\r\n```\r\n\r\n## 四、附加说明\r\n- 异步输出日志，不会影响主线程性能\r\n- error日志单独输出到error.log文件\r\n- all.log包含所有级别的日志\r\n- 每天会备份旧的日志文件，产生新的日志文件\r\n- 如果一天之中有日志文件超出大小限制(上面配的500M)，会存档当前文件，另外再创建一个新的文件\r\n- 日志文件只保存近期的（上面配置的30天）\r\n\r\n> 温馨提示：由于是个人项目，所以没配置多个邮件接收者，如有需要，请参考[官方文档](http://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender)\r\n\r\n## 五、收到的邮件截图\r\n![mail](http://cdn.kangyonggan.com/upload/20170123163536603.png)\r\n![mail](http://cdn.kangyonggan.com/upload/20170123163703359.png)\r\n![mail](http://cdn.kangyonggan.com/upload/20170123163703945.png)\r\n![mail](http://cdn.kangyonggan.com/upload/20170123163704569.png)',
   'kangyonggan', '康永敢', 0, '2017-01-23 07:41:33', '2017-01-23 08:41:08'),
  (60, '给自己的博客生成rss订阅源', 'Java',
   '## 一、目的\r\n1. 把我的所有博客全部变成rss订阅源，以便别人订阅。\r\n2. 当我有博客更新时，会自定更新订阅源，或者省事一点每隔30分钟自动更新一次。\r\n\r\n## 二、大致步骤\r\n1. 查询所有博客。\r\n2. 遍历所有博客，按`rss规范`组装成xml。\r\n3. 把组装好的xml写入服务器某个位置，比如放在:`/rss/blog.xml`\r\n4. 在rss阅读器中添加订阅源，url为:`http://cdn.kangyonggan.com/rss/blog.xml`\r\n5. 订阅成功，阅读器会把所有博客缓存到本地，离线也可阅读。\r\n\r\n## 三、按照rss规范组装xml\r\n使用第三方jar包`rsslibj`，它依赖`exml`,如下:\r\n\r\n```\r\n<rsslibj.version>1.0RC2</rsslibj.version>\r\n<exml.version>7.0</exml.version>\r\n\r\n<dependency>\r\n    <groupId>rsslibj</groupId>\r\n    <artifactId>rsslibj</artifactId>\r\n    <version>${rsslibj.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>exml</groupId>\r\n    <artifactId>exml</artifactId>\r\n    <version>${exml.version}</version>\r\n</dependency>\r\n```\r\n\r\n代码如下:\r\n\r\n```\r\nChannel channel = new Channel();\r\nchannel.setTitle(\"朕的博客\");\r\nchannel.setLink(\"http://kangyonggan.com\");\r\n\r\nString baseUrl = \"http://kangyonggan.com/#article/\";\r\nString rssName = \"blog.xml\";\r\n\r\ntry {\r\n    List<Article> list = articleService.findAllArticles();\r\n    log.info(\"一共{}篇文章\", list.size());\r\n\r\n    for (int i = 0; i < list.size(); i++) {\r\n        Article article = list.get(i);\r\n        Item item = new Item();\r\n        item.setTitle(article.getTitle());\r\n        item.setLink(baseUrl + article.getId());\r\n        item.setDcDate(article.getUpdatedTime());\r\n        item.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));\r\n\r\n        channel.addItem(i, item);\r\n    }\r\n\r\n    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);\r\n\r\n    if (!file.exists()) {\r\n        file.createNewFile();\r\n    }\r\n\r\n    PrintWriter writer = new PrintWriter(new FileWriter(file));\r\n    writer.write(channel.getFeed(\"rss\"));\r\n    writer.flush();\r\n    writer.close();\r\n\r\n    FtpUtil.upload(rssName, \"rss/\");\r\n\r\n    log.info(\"rss刷新成功\");\r\n    return \"success\";\r\n} catch (Exception e) {\r\n    log.error(\"查询所有文章失败\", e);\r\n}\r\n```\r\n\r\n但是有个问题，那就是`Item`不能设置发布时间，订阅后在阅读器里看不到文章的发布时间或者更新时间，所以我就从网上重新找了一个，它不去用任何jar包。\r\n\r\n## 四、解决发布时间问题\r\n#### `Feed.java`:\r\n\r\n```\r\npackage com.kangyonggan.blog.model.rss;\r\n\r\nimport lombok.Data;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2017/1/24\r\n */\r\n@Data\r\npublic class Feed {\r\n    String title;\r\n    String link;\r\n    String description;\r\n    String language;\r\n    String copyright;\r\n    String pubDate;\r\n    List<FeedMessage> feedMessages = new ArrayList();\r\n\r\n}\r\n```\r\n\r\n#### `FeedMessage.java`:\r\n\r\n```\r\npackage com.kangyonggan.blog.model.rss;\r\n\r\nimport lombok.Data;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2017/1/24\r\n */\r\n@Data\r\npublic class FeedMessage {\r\n\r\n    String title;\r\n\r\n    String description;\r\n\r\n    String link;\r\n\r\n    String author;\r\n\r\n    String guid;\r\n\r\n    String pubDate;\r\n\r\n}\r\n```\r\n\r\n#### `RSSFeedWriter.java`:\r\n\r\n```\r\npackage com.kangyonggan.blog.biz.util;\r\n\r\n\r\nimport com.kangyonggan.blog.model.rss.Feed;\r\nimport com.kangyonggan.blog.model.rss.FeedMessage;\r\n\r\nimport javax.xml.stream.XMLEventFactory;\r\nimport javax.xml.stream.XMLEventWriter;\r\nimport javax.xml.stream.XMLOutputFactory;\r\nimport javax.xml.stream.XMLStreamException;\r\nimport javax.xml.stream.events.*;\r\nimport java.io.FileOutputStream;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2017/1/24\r\n */\r\npublic class RSSFeedWriter {\r\n\r\n    private String outputFile;\r\n    private Feed feed;\r\n\r\n    public RSSFeedWriter(Feed feed, String outputFile) {\r\n        this.feed = feed;\r\n        this.outputFile = outputFile;\r\n    }\r\n\r\n    public void write() throws Exception {\r\n        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();\r\n\r\n        XMLEventWriter eventWriter = outputFactory.createXMLEventWriter(new FileOutputStream(outputFile));\r\n\r\n        XMLEventFactory eventFactory = XMLEventFactory.newInstance();\r\n        XMLEvent end = eventFactory.createDTD(\"\\n\");\r\n\r\n        // Create and write Start Tag\r\n\r\n        StartDocument startDocument = eventFactory.createStartDocument();\r\n\r\n        eventWriter.add(startDocument);\r\n\r\n        // Create open tag\r\n        eventWriter.add(end);\r\n\r\n        StartElement rssStart = eventFactory.createStartElement(\"\", \"\", \"rss\");\r\n        eventWriter.add(rssStart);\r\n        eventWriter.add(eventFactory.createAttribute(\"version\", \"2.0\"));\r\n        eventWriter.add(end);\r\n\r\n        eventWriter.add(eventFactory.createStartElement(\"\", \"\", \"channel\"));\r\n        eventWriter.add(end);\r\n\r\n        // Write the different nodes\r\n\r\n        createNode(eventWriter, \"title\", feed.getTitle());\r\n\r\n        createNode(eventWriter, \"link\", feed.getLink());\r\n\r\n        createNode(eventWriter, \"description\", feed.getDescription());\r\n\r\n        createNode(eventWriter, \"language\", feed.getLanguage());\r\n\r\n        createNode(eventWriter, \"copyright\", feed.getCopyright());\r\n\r\n        createNode(eventWriter, \"pubdate\", feed.getPubDate());\r\n\r\n        for (FeedMessage entry : feed.getFeedMessages()) {\r\n            eventWriter.add(eventFactory.createStartElement(\"\", \"\", \"item\"));\r\n            eventWriter.add(end);\r\n            createNode(eventWriter, \"title\", entry.getTitle());\r\n            createNode(eventWriter, \"description\", entry.getDescription());\r\n            createNode(eventWriter, \"link\", entry.getLink());\r\n            createNode(eventWriter, \"author\", entry.getAuthor());\r\n            createNode(eventWriter, \"guid\", entry.getGuid());\r\n            createNode(eventWriter, \"pubDate\", entry.getPubDate());\r\n            eventWriter.add(end);\r\n            eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"item\"));\r\n            eventWriter.add(end);\r\n\r\n        }\r\n\r\n        eventWriter.add(end);\r\n        eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"channel\"));\r\n        eventWriter.add(end);\r\n        eventWriter.add(eventFactory.createEndElement(\"\", \"\", \"rss\"));\r\n\r\n        eventWriter.add(end);\r\n\r\n        eventWriter.add(eventFactory.createEndDocument());\r\n\r\n        eventWriter.close();\r\n    }\r\n\r\n    private void createNode(XMLEventWriter eventWriter, String name,\r\n\r\n                            String value) throws XMLStreamException {\r\n        XMLEventFactory eventFactory = XMLEventFactory.newInstance();\r\n        XMLEvent end = eventFactory.createDTD(\"\\n\");\r\n        XMLEvent tab = eventFactory.createDTD(\"\\t\");\r\n        // Create Start node\r\n        StartElement sElement = eventFactory.createStartElement(\"\", \"\", name);\r\n        eventWriter.add(tab);\r\n        eventWriter.add(sElement);\r\n        // Create Content\r\n        Characters characters = eventFactory.createCharacters(value);\r\n        eventWriter.add(characters);\r\n        // Create End node\r\n        EndElement eElement = eventFactory.createEndElement(\"\", \"\", name);\r\n        eventWriter.add(eElement);\r\n        eventWriter.add(end);\r\n    }\r\n}\r\n```\r\n\r\n使用如下：\r\n\r\n```\r\nFeed feed = new Feed();\r\nfeed.setDescription(\"记录生活、工作和学习时的笔记心得等\");\r\nfeed.setLink(\"http://kangyonggan.com\");\r\nfeed.setTitle(\"朕的博客\");\r\nList<FeedMessage> feedMessages = feed.getFeedMessages();\r\n\r\nString baseUrl = \"http://kangyonggan.com/#article/\";\r\nString rssName = \"blog.xml\";\r\n\r\ntry {\r\n    List<Article> list = articleService.findAllArticles();\r\n    log.info(\"一共{}篇文章\", list.size());\r\n\r\n    for (int i = 0; i < list.size(); i++) {\r\n        Article article = list.get(i);\r\n        FeedMessage feedMessage = new FeedMessage();\r\n\r\n        feedMessage.setTitle(article.getTitle());\r\n        feedMessage.setLink(baseUrl + article.getId());\r\n        feedMessage.setDescription(MarkdownUtil.markdownToHtml(article.getContent()));\r\n        Date date = article.getUpdatedTime();\r\n        date.setTime(date.getTime() - 8 * 60 * 60 * 1000);\r\n        feedMessage.setPubDate(format.format(date));\r\n        feedMessages.add(feedMessage);\r\n    }\r\n\r\n    File file = new File(PropertiesUtil.getProperties(AppConstants.FILE_PATH_ROOT) + rssName);\r\n\r\n    if (!file.exists()) {\r\n        file.createNewFile();\r\n    }\r\n\r\n    new RSSFeedWriter(feed, file.getPath()).write();\r\n\r\n    FtpUtil.upload(rssName, \"rss/\");\r\n\r\n    log.info(\"rss刷新成功\");\r\n    return \"success\";\r\n} catch (Exception e) {\r\n    log.error(\"查询所有文章失败\", e);\r\n}\r\n```\r\n\r\n## 五、附rss订阅源和订阅效果\r\n\r\nblog.xml[下载](http://cdn.kangyonggan.com/rss/blog.xml)\r\n\r\n![rss](http://cdn.kangyonggan.com/upload/20170125103534094.png)\r\n\r\n![reeder](http://cdn.kangyonggan.com/upload/20170125103943826.png)\r\n\r\n欢迎大家订阅我的博客：`http://cdn.kangyonggan.com/rss/blog.xml`\r\n',
   'kangyonggan', '康永敢', 0, '2017-01-25 02:41:59', '2017-01-25 02:41:59'), (61, '使用配置中心代替properties', 'Java 架构',
                                                                            '## 一、 生成一个项目`confogcenter`\r\n用`cms-archetype`生成一个项目，然后在此基础上开发一个模块，用于管理配置信息（CRUD）\r\n\r\n我写的配置中心在github上: [https://github.com/kangyonggan/configcenter.git](https://github.com/kangyonggan/configcenter.git)\r\n\r\n## 二、原理\r\n在spring把占位符替换之前，发送http get请求到配置中心读取配置，拿到此项目的所有配置信息后（json），把json数据解析成一对对的名值对，最后把所有的名值对全部放入系统配置中，即:`System.setProperty(name, value);`。\r\n\r\n## 三、具体实现\r\n\r\n在`applicationContext.xml`的最上方（也不一定最上，但一定要在所有占位符的上面）添加自定义的`bean`:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/aop\r\n		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd\r\n		http://www.springframework.org/schema/beans\r\n		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\r\n		http://www.springframework.org/schema/tx\r\n		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\r\n		http://www.springframework.org/schema/context \r\n		http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\r\n\r\n    <!-- Activates annotation-based bean configuration -->\r\n    <context:annotation-config/>\r\n\r\n    <!-- 读取属性文件，否则 java 类无法直接读取属性 -->\r\n    <context:property-placeholder location=\"classpath:app.properties\"/>\r\n\r\n    <!-- 读取配置中心 -->\r\n    <bean class=\"com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer\" />\r\n \r\n    ...\r\n</beans>\r\n```\r\n\r\n`MyPropertyPlaceholderConfigurer.java`的实现:\r\n\r\n```\r\npackage com.kangyonggan.archetype.cmscc.biz.core;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.kangyonggan.archetype.cmscc.biz.util.HttpUtil;\r\nimport com.kangyonggan.archetype.cmscc.biz.util.PropertiesUtil;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2017/1/25\r\n */\r\n@Log4j2\r\npublic class MyPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {\r\n\r\n    public MyPropertyPlaceholderConfigurer() {\r\n        loadConfigs();\r\n    }\r\n\r\n    /**\r\n     * 加载配置\r\n     */\r\n    private void loadConfigs() {\r\n        String server = PropertiesUtil.getProperties(\"config.center.server\");\r\n        log.info(\"配置中心服务地址:{}\", server);\r\n\r\n        String data = HttpUtil.sendGet(server);\r\n\r\n        if (StringUtils.isEmpty(data)) {\r\n            throw new RuntimeException(\"读取配置中心异常\");\r\n        }\r\n\r\n        log.info(\"已成功获取配置中心的配置\");\r\n\r\n        JSONObject jsonObject = JSON.parseObject(data);\r\n        String errCode = (String) jsonObject.get(\"errCode\");\r\n        String errMsg = (String) jsonObject.get(\"errMsg\");\r\n\r\n        log.info(\"errCode:{}\", errCode);\r\n        log.info(\"errMsg:{}\", errMsg);\r\n\r\n        if (!\"success\".equals(errCode)) {\r\n            throw new RuntimeException(\"读取配置中心失败\");\r\n        }\r\n\r\n        JSONArray jsonArray = jsonObject.getJSONArray(\"configs\");\r\n        log.info(\"共有{}项配置!\", jsonArray.size());\r\n\r\n        load(jsonArray);\r\n    }\r\n\r\n    /**\r\n     * 加载配置\r\n     *\r\n     * @param jsonArray\r\n     */\r\n    public static void load(JSONArray jsonArray) {\r\n        for (int i = 0; i < jsonArray.size(); i++) {\r\n            JSONObject object = jsonArray.getJSONObject(i);\r\n            log.info(\"正在存储配置:{}\", object);\r\n\r\n            String name = object.getString(\"name\");\r\n            String value = object.getString(\"value\");\r\n\r\n            System.setProperty(name, value);\r\n            PropertiesUtil.putProperties(name, value);\r\n        }\r\n\r\n        log.info(\"从配置中心加载配置完毕！！！\");\r\n    }\r\n\r\n}\r\n```\r\n\r\n其中`public static void load(JSONArray jsonArray) `之所以写成了`static`是因为我其他地方也想使用, 比如：我发现ftp的ip配置错了，然后修改了ftp的ip，但是又不想重启服务器，这时候我就会在配置中心的控制台上点一下`推送配置`,然后客户端项目就能接收到配置了，然后就需要调用load方法刷新一下内存中的配置，但有些配置刷了也没用，比如jdbc的url等。\r\n\r\n接收配置的代码`ConfigcenterController.java`:\r\n\r\n```\r\npackage com.kangyonggan.archetype.cmscc.web.controller.web;\r\n\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport com.kangyonggan.archetype.cmscc.biz.core.MyPropertyPlaceholderConfigurer;\r\nimport lombok.extern.log4j.Log4j2;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.ResponseBody;\r\n\r\nimport java.net.URLDecoder;\r\n\r\n/**\r\n * @author kangyonggan\r\n * @since 2017/1/27\r\n */\r\n@Controller\r\n@RequestMapping(\"configcenter\")\r\n@Log4j2\r\npublic class ConfigcenterController {\r\n\r\n    /**\r\n     * 接收配置中心推送过来的配置\r\n     *\r\n     * @param data\r\n     */\r\n    @RequestMapping(method = RequestMethod.POST)\r\n    @ResponseBody\r\n    public boolean receiver(@RequestParam(\"data\") String data) {\r\n        try {\r\n            data = URLDecoder.decode(data, \"UTF-8\");\r\n            MyPropertyPlaceholderConfigurer.load(JSONArray.parseArray(data));\r\n        } catch (Exception e) {\r\n            log.error(\"接收配置失败\", e);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 四、注意\r\n#### 1. 日志的目录不能配置在配置中心，因为在读取配置中心的配置之前就使用到了日志，我的解决方案是写入了`pom.xml`, 如：`<log4j2.home>/Users/kyg/logs/cmscc</log4j2.home>`\r\n#### 2. 配置中心服务器的地址配置在了`app.properties`，因为配置中心的地址是可能变的，所以不能硬编码，如：`app.proerperties`的内容:\r\n\r\n```\r\nconfig.center.server=http://localhost:7777/configuration?proj=${project.parent.artifactId}&env=${env}\r\n```\r\n\r\n其中`${project.parent.artifactId}`会取自`pom.xml`中父模块的artifactId,  \r\n`${env}`指的是环境，比如开发环境，联调环境，生产环境等。我写在了pom.xml中:\r\n\r\n```\r\n<profiles>\r\n    <profile>\r\n        <id>local</id>\r\n        <activation>\r\n            <activeByDefault>true</activeByDefault>\r\n        </activation>\r\n        <properties>\r\n            <env>local</env>\r\n        </properties>\r\n    </profile>\r\n    <profile>\r\n        <id>dev</id>\r\n        <properties>\r\n            <env>local</env>\r\n        </properties>\r\n    </profile>\r\n    <profile>\r\n        <id>uat</id>\r\n        <properties>\r\n            <env>local</env>\r\n        </properties>\r\n    </profile>\r\n    <profile>\r\n        <id>hd</id>\r\n        <properties>\r\n            <env>local</env>\r\n        </properties>\r\n    </profile>\r\n    <profile>\r\n        <id>prod</id>\r\n        <properties>\r\n            <env>local</env>\r\n        </properties>\r\n    </profile>\r\n</profiles>\r\n```\r\n\r\n我把使用配置中心的项目也写了一个项目原型,地址在:[https://github.com/kangyonggan/cmscc-archetype.git](https://github.com/kangyonggan/cmscc-archetype.git)\r\n\r\n## 五、附配置中心推送配置的代码\r\n```\r\n/**\r\n * 推送配置\r\n *\r\n * @param id\r\n * @param env\r\n * @return\r\n */\r\n@RequestMapping(value = \"push\", method = RequestMethod.POST)\r\n@RequiresPermissions(\"CORE_PROJECT\")\r\n@ResponseBody\r\npublic Map<String, Object> push(@RequestParam(\"id\") Long id, @RequestParam(\"env\") String env) {\r\n    Map<String, Object> resultMap = getResultMap();\r\n    Project project = projectService.findProjectById(id);\r\n\r\n    if (project != null && StringUtils.isNotEmpty(project.getPushUrl())) {\r\n        List<Configuration> configurations = configurationService.findProjectConfigurations(project.getCode(), env);\r\n        String json = JSON.toJSONString(configurations);\r\n        try {\r\n            String data = URLEncoder.encode(json, \"UTF-8\");\r\n            String result = HttpUtil.sendPost(project.getPushUrl(), \"data=\" + data);\r\n            if (!\"true\".equals(result)) {\r\n                setResultMapFailure(resultMap, \"推送失败，请稍后再试！\");\r\n            }\r\n        } catch (Exception e) {\r\n            log.error(\"推送配置失败\", e);\r\n            setResultMapFailure(resultMap);\r\n        }\r\n    } else {\r\n        setResultMapFailure(resultMap);\r\n    }\r\n\r\n    return resultMap;\r\n}\r\n```\r\n\r\n',
                                                                            'kangyonggan', '康永敢', 0,
                                                                            '2017-01-27 03:23:44',
                                                                            '2017-01-27 03:23:44');

DELETE FROM dictionary
WHERE type = 'tag';
INSERT INTO dictionary
(code, value, type, sort)
VALUES
  ('linux', 'Linux', 'tag', 0),
  ('java', 'Java', 'tag', 1),
  ('sql', '数据库', 'tag', 2),
  ('install', '安装配置', 'tag', 3),
  ('web', '前端', 'tag', 4),
  ('bug', 'Bug', 'tag', 5),
  ('frame', '架构', 'tag', 6);

TRUNCATE TABLE dictionary_medi;
INSERT INTO dictionary_medi
(source_id, dictionary_code, type)
VALUES
  (1,'install', 'tag'),
  (2,'install', 'tag'),
  (3,'install', 'tag'),
  (4,'install', 'tag'),
  (5,'install', 'tag'),
  (6,'install', 'tag'),
  (7,'install', 'tag'),
  (8,'install', 'tag'),
  (9,'install', 'tag'),
  (10,'install', 'tag'),
  (11,'linux', 'tag'),
  (12,'java', 'tag'),
  (13,'java', 'tag'),
  (14,'sql', 'tag'),
  (15,'java', 'tag'),
  (16,'install', 'tag'),
  (17,'linux', 'tag'),
  (18,'linux', 'tag'),
  (19,'sql', 'tag'),
  (20,'linux', 'tag'),
  (21,'bug', 'tag'),
  (22,'linux', 'tag'),
  (23,'linux', 'tag'),
  (24,'linux', 'tag'),
  (25,'java', 'tag'),
  (25,'frame', 'tag'),
  (26,'java', 'tag'),
  (26,'frame', 'tag'),
  (27,'java', 'tag'),
  (27,'frame', 'tag'),
  (28,'java', 'tag'),
  (28,'frame', 'tag'),
  (29,'linux', 'tag'),
  (30,'linux', 'tag'),
  (30,'sql', 'tag'),
  (31,'web', 'tag'),
  (32,'java', 'tag'),
  (32,'sql', 'tag'),
  (33,'bug', 'tag'),
  (33,'java', 'tag'),
  (34,'linux', 'tag'),
  (34,'sql', 'tag'),
  (35,'frame', 'tag'),
  (35,'java', 'tag'),
  (36,'linux', 'tag'),
  (37,'linux', 'tag'),
  (38,'linux', 'tag'),
  (39,'linux', 'tag'),
  (40,'linux', 'tag'),
  (41,'linux', 'tag'),
  (41,'frame', 'tag'),
  (42,'sql', 'tag'),
  (42,'frame', 'tag'),
  (43,'bug', 'tag'),
  (44,'linux', 'tag'),
  (46,'frame', 'tag'),
  (48,'java', 'tag'),
  (48,'sql', 'tag'),
  (48,'frame', 'tag'),
  (55,'java', 'tag'),
  (55,'web', 'tag'),
  (55,'frame', 'tag'),
  (56,'java', 'tag'),
  (56,'bug', 'tag'),
  (57,'java', 'tag'),
  (58,'java', 'tag'),
  (60,'java', 'tag'),
  (61,'java', 'tag'),
  (61,'frame', 'tag');